{"version":3,"file":"livekit-client.e2ee.worker.js","sources":["../node_modules/loglevel/lib/loglevel.js","../src/logger.ts","../src/e2ee/constants.ts","../src/room/errors.ts","../src/e2ee/errors.ts","../src/e2ee/events.ts","../node_modules/events/events.js","../src/room/track/options.ts","../src/e2ee/utils.ts","../src/e2ee/worker/SifGuard.ts","../src/e2ee/worker/FrameCryptor.ts","../src/e2ee/worker/ParticipantKeyHandler.ts","../src/e2ee/worker/e2ee.worker.ts"],"sourcesContent":["/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","import * as log from 'loglevel';\r\n\r\nexport enum LogLevel {\r\n  trace = 0,\r\n  debug = 1,\r\n  info = 2,\r\n  warn = 3,\r\n  error = 4,\r\n  silent = 5,\r\n}\r\n\r\ntype LogLevelString = keyof typeof LogLevel;\r\n\r\ntype StructuredLogger = {\r\n  trace: (msg: string, context?: object) => void;\r\n  debug: (msg: string, context?: object) => void;\r\n  info: (msg: string, context?: object) => void;\r\n  warn: (msg: string, context?: object) => void;\r\n  error: (msg: string, context?: object) => void;\r\n  setDefaultLevel: (level: log.LogLevelDesc) => void;\r\n};\r\n\r\nconst livekitLogger = log.getLogger('livekit');\r\n\r\nlivekitLogger.setDefaultLevel(LogLevel.info);\r\n\r\nexport default livekitLogger as StructuredLogger;\r\n\r\nexport function setLogLevel(level: LogLevel | LogLevelString, loggerName?: 'livekit' | 'lk-e2ee') {\r\n  if (loggerName) {\r\n    log.getLogger(loggerName).setLevel(level);\r\n  }\r\n  for (const logger of Object.values(log.getLoggers())) {\r\n    logger.setLevel(level);\r\n  }\r\n}\r\n\r\nexport type LogExtension = (level: LogLevel, msg: string, context?: object) => void;\r\n\r\n/**\r\n * use this to hook into the logging function to allow sending internal livekit logs to third party services\r\n * if set, the browser logs will lose their stacktrace information (see https://github.com/pimterry/loglevel#writing-plugins)\r\n */\r\nexport function setLogExtension(extension: LogExtension) {\r\n  const originalFactory = livekitLogger.methodFactory;\r\n\r\n  livekitLogger.methodFactory = (methodName, configLevel, loggerName) => {\r\n    const rawMethod = originalFactory(methodName, configLevel, loggerName);\r\n\r\n    const logLevel = LogLevel[methodName as LogLevelString];\r\n    const needLog = logLevel >= configLevel && logLevel < LogLevel.silent;\r\n\r\n    return (msg, context?: [msg: string, context: object]) => {\r\n      if (context) rawMethod(msg, context);\r\n      else rawMethod(msg);\r\n      if (needLog) {\r\n        extension(logLevel, msg, context);\r\n      }\r\n    };\r\n  };\r\n  livekitLogger.setLevel(livekitLogger.getLevel()); // Be sure to call setLevel method in order to apply plugin\r\n}\r\n\r\nexport const workerLogger = log.getLogger('lk-e2ee') as StructuredLogger;\r\n","import type { KeyProviderOptions } from './types';\r\n\r\nexport const ENCRYPTION_ALGORITHM = 'AES-GCM';\r\n\r\n// We use a ringbuffer of keys so we can change them and still decode packets that were\r\n// encrypted with an old key. We use a size of 16 which corresponds to the four bits\r\n// in the frame trailer.\r\nexport const KEYRING_SIZE = 16;\r\n\r\n// How many consecutive frames can fail decrypting before a particular key gets marked as invalid\r\nexport const DECRYPTION_FAILURE_TOLERANCE = 10;\r\n\r\n// We copy the first bytes of the VP8 payload unencrypted.\r\n// For keyframes this is 10 bytes, for non-keyframes (delta) 3. See\r\n//   https://tools.ietf.org/html/rfc6386#section-9.1\r\n// This allows the bridge to continue detecting keyframes (only one byte needed in the JVB)\r\n// and is also a bit easier for the VP8 decoder (i.e. it generates funny garbage pictures\r\n// instead of being unable to decode).\r\n// This is a bit for show and we might want to reduce to 1 unconditionally in the final version.\r\n//\r\n// For audio (where frame.type is not set) we do not encrypt the opus TOC byte:\r\n//   https://tools.ietf.org/html/rfc6716#section-3.1\r\nexport const UNENCRYPTED_BYTES = {\r\n  key: 10,\r\n  delta: 3,\r\n  audio: 1, // frame.type is not set on audio, so this is set manually\r\n  empty: 0,\r\n} as const;\r\n\r\n/* We use a 12 byte bit IV. This is signalled in plain together with the\r\n packet. See https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters */\r\nexport const IV_LENGTH = 12;\r\n\r\n// flag set to indicate that e2ee has been setup for sender/receiver;\r\nexport const E2EE_FLAG = 'lk_e2ee';\r\n\r\nexport const SALT = 'LKFrameEncryptionKey';\r\n\r\nexport const KEY_PROVIDER_DEFAULTS: KeyProviderOptions = {\r\n  sharedKey: false,\r\n  ratchetSalt: SALT,\r\n  ratchetWindowSize: 8,\r\n  failureTolerance: DECRYPTION_FAILURE_TOLERANCE,\r\n} as const;\r\n\r\nexport const MAX_SIF_COUNT = 100;\r\nexport const MAX_SIF_DURATION = 2000;\r\n","export class LivekitError extends Error {\r\n  code: number;\r\n\r\n  constructor(code: number, message?: string) {\r\n    super(message || 'an error has occured');\r\n    this.code = code;\r\n  }\r\n}\r\n\r\nexport const enum ConnectionErrorReason {\r\n  NotAllowed,\r\n  ServerUnreachable,\r\n  InternalError,\r\n  Cancelled,\r\n}\r\n\r\nexport class ConnectionError extends LivekitError {\r\n  status?: number;\r\n\r\n  reason?: ConnectionErrorReason;\r\n\r\n  constructor(message?: string, reason?: ConnectionErrorReason, status?: number) {\r\n    super(1, message);\r\n    this.status = status;\r\n    this.reason = reason;\r\n  }\r\n}\r\n\r\nexport class DeviceUnsupportedError extends LivekitError {\r\n  constructor(message?: string) {\r\n    super(21, message ?? 'device is unsupported');\r\n  }\r\n}\r\n\r\nexport class TrackInvalidError extends LivekitError {\r\n  constructor(message?: string) {\r\n    super(20, message ?? 'track is invalid');\r\n  }\r\n}\r\n\r\nexport class UnsupportedServer extends LivekitError {\r\n  constructor(message?: string) {\r\n    super(10, message ?? 'unsupported server');\r\n  }\r\n}\r\n\r\nexport class UnexpectedConnectionState extends LivekitError {\r\n  constructor(message?: string) {\r\n    super(12, message ?? 'unexpected connection state');\r\n  }\r\n}\r\n\r\nexport class NegotiationError extends LivekitError {\r\n  constructor(message?: string) {\r\n    super(13, message ?? 'unable to negotiate');\r\n  }\r\n}\r\n\r\nexport class PublishDataError extends LivekitError {\r\n  constructor(message?: string) {\r\n    super(13, message ?? 'unable to publish data');\r\n  }\r\n}\r\n\r\nexport enum MediaDeviceFailure {\r\n  // user rejected permissions\r\n  PermissionDenied = 'PermissionDenied',\r\n  // device is not available\r\n  NotFound = 'NotFound',\r\n  // device is in use. On Windows, only a single tab may get access to a device at a time.\r\n  DeviceInUse = 'DeviceInUse',\r\n  Other = 'Other',\r\n}\r\n\r\nexport namespace MediaDeviceFailure {\r\n  export function getFailure(error: any): MediaDeviceFailure | undefined {\r\n    if (error && 'name' in error) {\r\n      if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {\r\n        return MediaDeviceFailure.NotFound;\r\n      }\r\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\r\n        return MediaDeviceFailure.PermissionDenied;\r\n      }\r\n      if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {\r\n        return MediaDeviceFailure.DeviceInUse;\r\n      }\r\n      return MediaDeviceFailure.Other;\r\n    }\r\n  }\r\n}\r\n","import { LivekitError } from '../room/errors';\r\n\r\nexport enum CryptorErrorReason {\r\n  InvalidKey = 0,\r\n  MissingKey = 1,\r\n  InternalError = 2,\r\n}\r\n\r\nexport class CryptorError extends LivekitError {\r\n  reason: CryptorErrorReason;\r\n\r\n  constructor(message?: string, reason: CryptorErrorReason = CryptorErrorReason.InternalError) {\r\n    super(40, message);\r\n    this.reason = reason;\r\n  }\r\n}\r\n","import type Participant from '../room/participant/Participant';\r\nimport type { CryptorError } from './errors';\r\nimport type { KeyInfo } from './types';\r\n\r\nexport enum KeyProviderEvent {\r\n  SetKey = 'setKey',\r\n  RatchetRequest = 'ratchetRequest',\r\n  KeyRatcheted = 'keyRatcheted',\r\n}\r\n\r\nexport type KeyProviderCallbacks = {\r\n  [KeyProviderEvent.SetKey]: (keyInfo: KeyInfo) => void;\r\n  [KeyProviderEvent.RatchetRequest]: (participantIdentity?: string, keyIndex?: number) => void;\r\n  [KeyProviderEvent.KeyRatcheted]: (material: CryptoKey, keyIndex?: number) => void;\r\n};\r\n\r\nexport enum KeyHandlerEvent {\r\n  KeyRatcheted = 'keyRatcheted',\r\n}\r\n\r\nexport type ParticipantKeyHandlerCallbacks = {\r\n  [KeyHandlerEvent.KeyRatcheted]: (\r\n    material: CryptoKey,\r\n    participantIdentity: string,\r\n    keyIndex?: number,\r\n  ) => void;\r\n};\r\n\r\nexport enum EncryptionEvent {\r\n  ParticipantEncryptionStatusChanged = 'participantEncryptionStatusChanged',\r\n  EncryptionError = 'encryptionError',\r\n}\r\n\r\nexport type E2EEManagerCallbacks = {\r\n  [EncryptionEvent.ParticipantEncryptionStatusChanged]: (\r\n    enabled: boolean,\r\n    participant: Participant,\r\n  ) => void;\r\n  [EncryptionEvent.EncryptionError]: (error: Error) => void;\r\n};\r\n\r\nexport type CryptorCallbacks = {\r\n  [CryptorEvent.Error]: (error: CryptorError) => void;\r\n};\r\n\r\nexport enum CryptorEvent {\r\n  Error = 'cryptorError',\r\n}\r\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","import type { Track } from './Track';\r\n\r\nexport interface TrackPublishDefaults {\r\n  /**\r\n   * encoding parameters for camera track\r\n   */\r\n  videoEncoding?: VideoEncoding;\r\n\r\n  /**\r\n   * @experimental\r\n   */\r\n  backupCodec?: { codec: BackupVideoCodec; encoding: VideoEncoding } | false;\r\n\r\n  /**\r\n   * encoding parameters for screen share track\r\n   */\r\n  screenShareEncoding?: VideoEncoding;\r\n\r\n  /**\r\n   * codec, defaults to vp8; for svc codecs, auto enable vp8\r\n   * as backup. (TBD)\r\n   */\r\n  videoCodec?: VideoCodec;\r\n\r\n  /**\r\n   * max audio bitrate, defaults to [[AudioPresets.music]]\r\n   * @deprecated use `audioPreset` instead\r\n   */\r\n  audioBitrate?: number;\r\n\r\n  /**\r\n   * which audio preset should be used for publishing (audio) tracks\r\n   * defaults to [[AudioPresets.music]]\r\n   */\r\n  audioPreset?: AudioPreset;\r\n\r\n  /**\r\n   * dtx (Discontinuous Transmission of audio), enabled by default for mono tracks.\r\n   */\r\n  dtx?: boolean;\r\n\r\n  /**\r\n   * red (Redundant Audio Data), enabled by default for mono tracks.\r\n   */\r\n  red?: boolean;\r\n\r\n  /**\r\n   * publish track in stereo mode (or set to false to disable). defaults determined by capture channel count.\r\n   */\r\n  forceStereo?: boolean;\r\n\r\n  /**\r\n   * use simulcast, defaults to true.\r\n   * When using simulcast, LiveKit will publish up to three versions of the stream\r\n   * at various resolutions.\r\n   */\r\n  simulcast?: boolean;\r\n\r\n  /**\r\n   * scalability mode for svc codecs, defaults to 'L3T3'.\r\n   * for svc codecs, simulcast is disabled.\r\n   */\r\n  scalabilityMode?: ScalabilityMode;\r\n\r\n  /**\r\n   * Up to two additional simulcast layers to publish in addition to the original\r\n   * Track.\r\n   * When left blank, it defaults to h180, h360.\r\n   * If a SVC codec is used (VP9 or AV1), this field has no effect.\r\n   *\r\n   * To publish three total layers, you would specify:\r\n   * {\r\n   *   videoEncoding: {...}, // encoding of the primary layer\r\n   *   videoSimulcastLayers: [\r\n   *     VideoPresets.h540,\r\n   *     VideoPresets.h216,\r\n   *   ],\r\n   * }\r\n   */\r\n  videoSimulcastLayers?: Array<VideoPreset>;\r\n\r\n  /**\r\n   * custom video simulcast layers for screen tracks\r\n   * Note: the layers need to be ordered from lowest to highest quality\r\n   */\r\n  screenShareSimulcastLayers?: Array<VideoPreset>;\r\n\r\n  /**\r\n   * For local tracks, stop the underlying MediaStreamTrack when the track is muted (or paused)\r\n   * on some platforms, this option is necessary to disable the microphone recording indicator.\r\n   * Note: when this is enabled, and BT devices are connected, they will transition between\r\n   * profiles (e.g. HFP to A2DP) and there will be an audible difference in playback.\r\n   *\r\n   * defaults to false\r\n   */\r\n  stopMicTrackOnMute?: boolean;\r\n}\r\n\r\n/**\r\n * Options when publishing tracks\r\n */\r\nexport interface TrackPublishOptions extends TrackPublishDefaults {\r\n  /**\r\n   * set a track name\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * Source of track, camera, microphone, or screen\r\n   */\r\n  source?: Track.Source;\r\n}\r\n\r\nexport interface CreateLocalTracksOptions {\r\n  /**\r\n   * audio track options, true to create with defaults. false if audio shouldn't be created\r\n   * default true\r\n   */\r\n  audio?: boolean | AudioCaptureOptions;\r\n\r\n  /**\r\n   * video track options, true to create with defaults. false if video shouldn't be created\r\n   * default true\r\n   */\r\n  video?: boolean | VideoCaptureOptions;\r\n}\r\n\r\nexport interface VideoCaptureOptions {\r\n  /**\r\n   * A ConstrainDOMString object specifying a device ID or an array of device\r\n   * IDs which are acceptable and/or required.\r\n   */\r\n  deviceId?: ConstrainDOMString;\r\n\r\n  /**\r\n   * a facing or an array of facings which are acceptable and/or required.\r\n   */\r\n  facingMode?: 'user' | 'environment' | 'left' | 'right';\r\n\r\n  resolution?: VideoResolution;\r\n}\r\n\r\nexport interface ScreenShareCaptureOptions {\r\n  /**\r\n   * true to capture audio shared. browser support for audio capturing in\r\n   * screenshare is limited: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia#browser_compatibility\r\n   */\r\n  audio?: boolean | AudioCaptureOptions;\r\n\r\n  /**\r\n   * only allows for 'true' and chrome allows for additional options to be passed in\r\n   * https://developer.chrome.com/docs/web-platform/screen-sharing-controls/#displaySurface\r\n   */\r\n  video?: true | { displaySurface?: 'window' | 'browser' | 'monitor' };\r\n\r\n  /** capture resolution, defaults to full HD */\r\n  resolution?: VideoResolution;\r\n\r\n  /** a CaptureController object instance containing methods that can be used to further manipulate the capture session if included. */\r\n  controller?: unknown; // TODO replace type with CaptureController once it lands in TypeScript\r\n\r\n  /** specifies whether the browser should allow the user to select the current tab for capture */\r\n  selfBrowserSurface?: 'include' | 'exclude';\r\n\r\n  /** specifies whether the browser should display a control to allow the user to dynamically switch the shared tab during screen-sharing. */\r\n  surfaceSwitching?: 'include' | 'exclude';\r\n\r\n  /** specifies whether the browser should include the system audio among the possible audio sources offered to the user */\r\n  systemAudio?: 'include' | 'exclude';\r\n\r\n  /**\r\n   * Experimental option to control whether the audio playing in a tab will continue to be played out of a user's\r\n   * local speakers when the tab is captured.\r\n   */\r\n  suppressLocalAudioPlayback?: boolean;\r\n}\r\n\r\nexport interface AudioCaptureOptions {\r\n  /**\r\n   * specifies whether automatic gain control is preferred and/or required\r\n   */\r\n  autoGainControl?: ConstrainBoolean;\r\n\r\n  /**\r\n   * the channel count or range of channel counts which are acceptable and/or required\r\n   */\r\n  channelCount?: ConstrainULong;\r\n\r\n  /**\r\n   * A ConstrainDOMString object specifying a device ID or an array of device\r\n   * IDs which are acceptable and/or required.\r\n   */\r\n  deviceId?: ConstrainDOMString;\r\n\r\n  /**\r\n   * whether or not echo cancellation is preferred and/or required\r\n   */\r\n  echoCancellation?: ConstrainBoolean;\r\n\r\n  /**\r\n   * the latency or range of latencies which are acceptable and/or required.\r\n   */\r\n  latency?: ConstrainDouble;\r\n\r\n  /**\r\n   * whether noise suppression is preferred and/or required.\r\n   */\r\n  noiseSuppression?: ConstrainBoolean;\r\n\r\n  /**\r\n   * the sample rate or range of sample rates which are acceptable and/or required.\r\n   */\r\n  sampleRate?: ConstrainULong;\r\n\r\n  /**\r\n   * sample size or range of sample sizes which are acceptable and/or required.\r\n   */\r\n  sampleSize?: ConstrainULong;\r\n}\r\n\r\nexport interface AudioOutputOptions {\r\n  /**\r\n   * deviceId to output audio\r\n   *\r\n   * Only supported on browsers where `setSinkId` is available\r\n   */\r\n  deviceId?: string;\r\n}\r\n\r\nexport interface VideoResolution {\r\n  width: number;\r\n  height: number;\r\n  frameRate?: number;\r\n  aspectRatio?: number;\r\n}\r\n\r\nexport interface VideoEncoding {\r\n  maxBitrate: number;\r\n  maxFramerate?: number;\r\n  priority?: RTCPriorityType;\r\n}\r\n\r\nexport class VideoPreset {\r\n  encoding: VideoEncoding;\r\n\r\n  width: number;\r\n\r\n  height: number;\r\n\r\n  constructor(\r\n    width: number,\r\n    height: number,\r\n    maxBitrate: number,\r\n    maxFramerate?: number,\r\n    priority?: RTCPriorityType,\r\n  ) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.encoding = {\r\n      maxBitrate,\r\n      maxFramerate,\r\n      priority,\r\n    };\r\n  }\r\n\r\n  get resolution(): VideoResolution {\r\n    return {\r\n      width: this.width,\r\n      height: this.height,\r\n      frameRate: this.encoding.maxFramerate,\r\n      aspectRatio: this.width / this.height,\r\n    };\r\n  }\r\n}\r\n\r\nexport interface AudioPreset {\r\n  maxBitrate: number;\r\n  priority?: RTCPriorityType;\r\n}\r\n\r\nconst backupCodecs = ['vp8', 'h264'] as const;\r\n\r\nexport const videoCodecs = ['vp8', 'h264', 'vp9', 'av1'] as const;\r\n\r\nexport type VideoCodec = (typeof videoCodecs)[number];\r\n\r\nexport type BackupVideoCodec = (typeof backupCodecs)[number];\r\n\r\nexport function isBackupCodec(codec: string): codec is BackupVideoCodec {\r\n  return !!backupCodecs.find((backup) => backup === codec);\r\n}\r\n\r\nexport function isCodecEqual(c1: string | undefined, c2: string | undefined): boolean {\r\n  return (\r\n    c1?.toLowerCase().replace(/audio\\/|video\\//y, '') ===\r\n    c2?.toLowerCase().replace(/audio\\/|video\\//y, '')\r\n  );\r\n}\r\n\r\n/**\r\n * scalability modes for svc.\r\n */\r\nexport type ScalabilityMode = 'L1T3' | 'L2T3' | 'L2T3_KEY' | 'L3T3' | 'L3T3_KEY';\r\n\r\nexport namespace AudioPresets {\r\n  export const telephone: AudioPreset = {\r\n    maxBitrate: 12_000,\r\n  };\r\n  export const speech: AudioPreset = {\r\n    maxBitrate: 20_000,\r\n  };\r\n  export const music: AudioPreset = {\r\n    maxBitrate: 32_000,\r\n  };\r\n  export const musicStereo: AudioPreset = {\r\n    maxBitrate: 48_000,\r\n  };\r\n  export const musicHighQuality: AudioPreset = {\r\n    maxBitrate: 64_000,\r\n  };\r\n  export const musicHighQualityStereo: AudioPreset = {\r\n    maxBitrate: 96_000,\r\n  };\r\n}\r\n\r\n/**\r\n * Sane presets for video resolution/encoding\r\n */\r\nexport const VideoPresets = {\r\n  h90: new VideoPreset(160, 90, 90_000, 20),\r\n  h180: new VideoPreset(320, 180, 160_000, 20),\r\n  h216: new VideoPreset(384, 216, 180_000, 20),\r\n  h360: new VideoPreset(640, 360, 450_000, 20),\r\n  h540: new VideoPreset(960, 540, 800_000, 25),\r\n  h720: new VideoPreset(1280, 720, 1_700_000, 30),\r\n  h1080: new VideoPreset(1920, 1080, 3_000_000, 30),\r\n  h1440: new VideoPreset(2560, 1440, 5_000_000, 30),\r\n  h2160: new VideoPreset(3840, 2160, 8_000_000, 30),\r\n} as const;\r\n\r\n/**\r\n * Four by three presets\r\n */\r\nexport const VideoPresets43 = {\r\n  h120: new VideoPreset(160, 120, 70_000, 20),\r\n  h180: new VideoPreset(240, 180, 125_000, 20),\r\n  h240: new VideoPreset(320, 240, 140_000, 20),\r\n  h360: new VideoPreset(480, 360, 330_000, 20),\r\n  h480: new VideoPreset(640, 480, 500_000, 20),\r\n  h540: new VideoPreset(720, 540, 600_000, 25),\r\n  h720: new VideoPreset(960, 720, 1_300_000, 30),\r\n  h1080: new VideoPreset(1440, 1080, 2_300_000, 30),\r\n  h1440: new VideoPreset(1920, 1440, 3_800_000, 30),\r\n} as const;\r\n\r\nexport const ScreenSharePresets = {\r\n  h360fps3: new VideoPreset(640, 360, 200_000, 3, 'medium'),\r\n  h720fps5: new VideoPreset(1280, 720, 400_000, 5, 'medium'),\r\n  h720fps15: new VideoPreset(1280, 720, 1_500_000, 15, 'medium'),\r\n  h720fps30: new VideoPreset(1280, 720, 2_000_000, 30, 'medium'),\r\n  h1080fps15: new VideoPreset(1920, 1080, 2_500_000, 15, 'medium'),\r\n  h1080fps30: new VideoPreset(1920, 1080, 4_000_000, 30, 'medium'),\r\n} as const;\r\n","import { videoCodecs } from '../room/track/options';\r\nimport type { VideoCodec } from '../room/track/options';\r\nimport { ENCRYPTION_ALGORITHM } from './constants';\r\n\r\nexport function isE2EESupported() {\r\n  return isInsertableStreamSupported() || isScriptTransformSupported();\r\n}\r\n\r\nexport function isScriptTransformSupported() {\r\n  // @ts-ignore\r\n  return typeof window.RTCRtpScriptTransform !== 'undefined';\r\n}\r\n\r\nexport function isInsertableStreamSupported() {\r\n  return (\r\n    typeof window.RTCRtpSender !== 'undefined' &&\r\n    // @ts-ignore\r\n    typeof window.RTCRtpSender.prototype.createEncodedStreams !== 'undefined'\r\n  );\r\n}\r\n\r\nexport function isVideoFrame(\r\n  frame: RTCEncodedAudioFrame | RTCEncodedVideoFrame,\r\n): frame is RTCEncodedVideoFrame {\r\n  return 'type' in frame;\r\n}\r\n\r\nexport async function importKey(\r\n  keyBytes: Uint8Array | ArrayBuffer,\r\n  algorithm: string | { name: string } = { name: ENCRYPTION_ALGORITHM },\r\n  usage: 'derive' | 'encrypt' = 'encrypt',\r\n) {\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\r\n  return crypto.subtle.importKey(\r\n    'raw',\r\n    keyBytes,\r\n    algorithm,\r\n    false,\r\n    usage === 'derive' ? ['deriveBits', 'deriveKey'] : ['encrypt', 'decrypt'],\r\n  );\r\n}\r\n\r\nexport async function createKeyMaterialFromString(password: string) {\r\n  let enc = new TextEncoder();\r\n\r\n  const keyMaterial = await crypto.subtle.importKey(\r\n    'raw',\r\n    enc.encode(password),\r\n    {\r\n      name: 'PBKDF2',\r\n    },\r\n    false,\r\n    ['deriveBits', 'deriveKey'],\r\n  );\r\n\r\n  return keyMaterial;\r\n}\r\n\r\nexport async function createKeyMaterialFromBuffer(cryptoBuffer: ArrayBuffer) {\r\n  const keyMaterial = await crypto.subtle.importKey('raw', cryptoBuffer, 'HKDF', false, [\r\n    'deriveBits',\r\n    'deriveKey',\r\n  ]);\r\n\r\n  return keyMaterial;\r\n}\r\n\r\nfunction getAlgoOptions(algorithmName: string, salt: string) {\r\n  const textEncoder = new TextEncoder();\r\n  const encodedSalt = textEncoder.encode(salt);\r\n  switch (algorithmName) {\r\n    case 'HKDF':\r\n      return {\r\n        name: 'HKDF',\r\n        salt: encodedSalt,\r\n        hash: 'SHA-256',\r\n        info: new ArrayBuffer(128),\r\n      };\r\n    case 'PBKDF2': {\r\n      return {\r\n        name: 'PBKDF2',\r\n        salt: encodedSalt,\r\n        hash: 'SHA-256',\r\n        iterations: 100000,\r\n      };\r\n    }\r\n    default:\r\n      throw new Error(`algorithm ${algorithmName} is currently unsupported`);\r\n  }\r\n}\r\n\r\n/**\r\n * Derives a set of keys from the master key.\r\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\r\n */\r\nexport async function deriveKeys(material: CryptoKey, salt: string) {\r\n  const algorithmOptions = getAlgoOptions(material.algorithm.name, salt);\r\n\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\r\n  const encryptionKey = await crypto.subtle.deriveKey(\r\n    algorithmOptions,\r\n    material,\r\n    {\r\n      name: ENCRYPTION_ALGORITHM,\r\n      length: 128,\r\n    },\r\n    false,\r\n    ['encrypt', 'decrypt'],\r\n  );\r\n\r\n  return { material, encryptionKey };\r\n}\r\n\r\nexport function createE2EEKey(): Uint8Array {\r\n  return window.crypto.getRandomValues(new Uint8Array(32));\r\n}\r\n\r\nexport function mimeTypeToVideoCodecString(mimeType: string) {\r\n  const codec = mimeType.split('/')[1].toLowerCase() as VideoCodec;\r\n  if (!videoCodecs.includes(codec)) {\r\n    throw Error(`Video codec not supported: ${codec}`);\r\n  }\r\n  return codec;\r\n}\r\n\r\n/**\r\n * Ratchets a key. See\r\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\r\n */\r\nexport async function ratchet(material: CryptoKey, salt: string): Promise<ArrayBuffer> {\r\n  const algorithmOptions = getAlgoOptions(material.algorithm.name, salt);\r\n\r\n  // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\r\n  return crypto.subtle.deriveBits(algorithmOptions, material, 256);\r\n}\r\n\r\nexport function needsRbspUnescaping(frameData: Uint8Array) {\r\n  for (var i = 0; i < frameData.length - 3; i++) {\r\n    if (frameData[i] == 0 && frameData[i + 1] == 0 && frameData[i + 2] == 3) return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function parseRbsp(stream: Uint8Array): Uint8Array {\r\n  const dataOut: number[] = [];\r\n  var length = stream.length;\r\n  for (var i = 0; i < stream.length; ) {\r\n    // Be careful about over/underflow here. byte_length_ - 3 can underflow, and\r\n    // i + 3 can overflow, but byte_length_ - i can't, because i < byte_length_\r\n    // above, and that expression will produce the number of bytes left in\r\n    // the stream including the byte at i.\r\n    if (length - i >= 3 && !stream[i] && !stream[i + 1] && stream[i + 2] == 3) {\r\n      // Two rbsp bytes.\r\n      dataOut.push(stream[i++]);\r\n      dataOut.push(stream[i++]);\r\n      // Skip the emulation byte.\r\n      i++;\r\n    } else {\r\n      // Single rbsp byte.\r\n      dataOut.push(stream[i++]);\r\n    }\r\n  }\r\n  return new Uint8Array(dataOut);\r\n}\r\n\r\nconst kZerosInStartSequence = 2;\r\nconst kEmulationByte = 3;\r\n\r\nexport function writeRbsp(data_in: Uint8Array): Uint8Array {\r\n  const dataOut: number[] = [];\r\n  var numConsecutiveZeros = 0;\r\n  for (var i = 0; i < data_in.length; ++i) {\r\n    var byte = data_in[i];\r\n    if (byte <= kEmulationByte && numConsecutiveZeros >= kZerosInStartSequence) {\r\n      // Need to escape.\r\n      dataOut.push(kEmulationByte);\r\n      numConsecutiveZeros = 0;\r\n    }\r\n    dataOut.push(byte);\r\n    if (byte == 0) {\r\n      ++numConsecutiveZeros;\r\n    } else {\r\n      numConsecutiveZeros = 0;\r\n    }\r\n  }\r\n  return new Uint8Array(dataOut);\r\n}\r\n","import { MAX_SIF_COUNT, MAX_SIF_DURATION } from '../constants';\r\n\r\nexport class SifGuard {\r\n  private consecutiveSifCount = 0;\r\n\r\n  private sifSequenceStartedAt: number | undefined;\r\n\r\n  private lastSifReceivedAt: number = 0;\r\n\r\n  private userFramesSinceSif: number = 0;\r\n\r\n  recordSif() {\r\n    this.consecutiveSifCount += 1;\r\n    this.sifSequenceStartedAt ??= Date.now();\r\n    this.lastSifReceivedAt = Date.now();\r\n  }\r\n\r\n  recordUserFrame() {\r\n    if (this.sifSequenceStartedAt === undefined) {\r\n      return;\r\n    } else {\r\n      this.userFramesSinceSif += 1;\r\n    }\r\n    if (\r\n      // reset if we received more user frames than SIFs\r\n      this.userFramesSinceSif > this.consecutiveSifCount ||\r\n      // also reset if we got a new user frame and the latest SIF frame hasn't been updated in a while\r\n      Date.now() - this.lastSifReceivedAt > MAX_SIF_DURATION\r\n    ) {\r\n      this.reset();\r\n    }\r\n  }\r\n\r\n  isSifAllowed() {\r\n    return (\r\n      this.consecutiveSifCount < MAX_SIF_COUNT &&\r\n      (this.sifSequenceStartedAt === undefined ||\r\n        Date.now() - this.sifSequenceStartedAt < MAX_SIF_DURATION)\r\n    );\r\n  }\r\n\r\n  reset() {\r\n    this.userFramesSinceSif = 0;\r\n    this.consecutiveSifCount = 0;\r\n    this.sifSequenceStartedAt = undefined;\r\n  }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// TODO code inspired by https://github.com/webrtc/samples/blob/gh-pages/src/content/insertable-streams/endtoend-encryption/js/worker.js\r\nimport { EventEmitter } from 'events';\r\nimport type TypedEventEmitter from 'typed-emitter';\r\nimport { workerLogger } from '../../logger';\r\nimport type { VideoCodec } from '../../room/track/options';\r\nimport { ENCRYPTION_ALGORITHM, IV_LENGTH, UNENCRYPTED_BYTES } from '../constants';\r\nimport { CryptorError, CryptorErrorReason } from '../errors';\r\nimport { CryptorCallbacks, CryptorEvent } from '../events';\r\nimport type { DecodeRatchetOptions, KeyProviderOptions, KeySet } from '../types';\r\nimport { deriveKeys, isVideoFrame, needsRbspUnescaping, parseRbsp, writeRbsp } from '../utils';\r\nimport type { ParticipantKeyHandler } from './ParticipantKeyHandler';\r\nimport { SifGuard } from './SifGuard';\r\n\r\nexport const encryptionEnabledMap: Map<string, boolean> = new Map();\r\n\r\nexport interface FrameCryptorConstructor {\r\n  new (opts?: unknown): BaseFrameCryptor;\r\n}\r\n\r\nexport interface TransformerInfo {\r\n  readable: ReadableStream;\r\n  writable: WritableStream;\r\n  transformer: TransformStream;\r\n  abortController: AbortController;\r\n}\r\n\r\nexport class BaseFrameCryptor extends (EventEmitter as new () => TypedEventEmitter<CryptorCallbacks>) {\r\n  protected encodeFunction(\r\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\r\n    controller: TransformStreamDefaultController,\r\n  ): Promise<any> {\r\n    throw Error('not implemented for subclass');\r\n  }\r\n\r\n  protected decodeFunction(\r\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\r\n    controller: TransformStreamDefaultController,\r\n  ): Promise<any> {\r\n    throw Error('not implemented for subclass');\r\n  }\r\n}\r\n\r\n/**\r\n * Cryptor is responsible for en-/decrypting media frames.\r\n * Each Cryptor instance is responsible for en-/decrypting a single mediaStreamTrack.\r\n */\r\nexport class FrameCryptor extends BaseFrameCryptor {\r\n  private sendCounts: Map<number, number>;\r\n\r\n  private participantIdentity: string | undefined;\r\n\r\n  private trackId: string | undefined;\r\n\r\n  private keys: ParticipantKeyHandler;\r\n\r\n  private videoCodec?: VideoCodec;\r\n\r\n  private rtpMap: Map<number, VideoCodec>;\r\n\r\n  private keyProviderOptions: KeyProviderOptions;\r\n\r\n  /**\r\n   * used for detecting server injected unencrypted frames\r\n   */\r\n  private sifTrailer: Uint8Array;\r\n\r\n  private sifGuard: SifGuard;\r\n\r\n  constructor(opts: {\r\n    keys: ParticipantKeyHandler;\r\n    participantIdentity: string;\r\n    keyProviderOptions: KeyProviderOptions;\r\n    sifTrailer?: Uint8Array;\r\n  }) {\r\n    super();\r\n    this.sendCounts = new Map();\r\n    this.keys = opts.keys;\r\n    this.participantIdentity = opts.participantIdentity;\r\n    this.rtpMap = new Map();\r\n    this.keyProviderOptions = opts.keyProviderOptions;\r\n    this.sifTrailer = opts.sifTrailer ?? Uint8Array.from([]);\r\n    this.sifGuard = new SifGuard();\r\n  }\r\n\r\n  /**\r\n   * Assign a different participant to the cryptor.\r\n   * useful for transceiver re-use\r\n   * @param id\r\n   * @param keys\r\n   */\r\n  setParticipant(id: string, keys: ParticipantKeyHandler) {\r\n    this.participantIdentity = id;\r\n    this.keys = keys;\r\n    this.sifGuard.reset();\r\n  }\r\n\r\n  unsetParticipant() {\r\n    this.participantIdentity = undefined;\r\n  }\r\n\r\n  isEnabled() {\r\n    if (this.participantIdentity) {\r\n      return encryptionEnabledMap.get(this.participantIdentity);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  getParticipantIdentity() {\r\n    return this.participantIdentity;\r\n  }\r\n\r\n  getTrackId() {\r\n    return this.trackId;\r\n  }\r\n\r\n  /**\r\n   * Update the video codec used by the mediaStreamTrack\r\n   * @param codec\r\n   */\r\n  setVideoCodec(codec: VideoCodec) {\r\n    this.videoCodec = codec;\r\n  }\r\n\r\n  /**\r\n   * rtp payload type map used for figuring out codec of payload type when encoding\r\n   * @param map\r\n   */\r\n  setRtpMap(map: Map<number, VideoCodec>) {\r\n    this.rtpMap = map;\r\n  }\r\n\r\n  setupTransform(\r\n    operation: 'encode' | 'decode',\r\n    readable: ReadableStream,\r\n    writable: WritableStream,\r\n    trackId: string,\r\n    codec?: VideoCodec,\r\n  ) {\r\n    if (codec) {\r\n      workerLogger.info('setting codec on cryptor to', { codec });\r\n      this.videoCodec = codec;\r\n    }\r\n\r\n    const transformFn = operation === 'encode' ? this.encodeFunction : this.decodeFunction;\r\n    const transformStream = new TransformStream({\r\n      transform: transformFn.bind(this),\r\n    });\r\n\r\n    readable\r\n      .pipeThrough(transformStream)\r\n      .pipeTo(writable)\r\n      .catch((e) => {\r\n        workerLogger.warn(e);\r\n        this.emit(CryptorEvent.Error, e instanceof CryptorError ? e : new CryptorError(e.message));\r\n      });\r\n    this.trackId = trackId;\r\n  }\r\n\r\n  setSifTrailer(trailer: Uint8Array) {\r\n    this.sifTrailer = trailer;\r\n  }\r\n\r\n  /**\r\n   * Function that will be injected in a stream and will encrypt the given encoded frames.\r\n   *\r\n   * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\r\n   * @param {TransformStreamDefaultController} controller - TransportStreamController.\r\n   *\r\n   * The VP8 payload descriptor described in\r\n   * https://tools.ietf.org/html/rfc7741#section-4.2\r\n   * is part of the RTP packet and not part of the frame and is not controllable by us.\r\n   * This is fine as the SFU keeps having access to it for routing.\r\n   *\r\n   * The encrypted frame is formed as follows:\r\n   * 1) Find unencrypted byte length, depending on the codec, frame type and kind.\r\n   * 2) Form the GCM IV for the frame as described above.\r\n   * 3) Encrypt the rest of the frame using AES-GCM.\r\n   * 4) Allocate space for the encrypted frame.\r\n   * 5) Copy the unencrypted bytes to the start of the encrypted frame.\r\n   * 6) Append the ciphertext to the encrypted frame.\r\n   * 7) Append the IV.\r\n   * 8) Append a single byte for the key identifier.\r\n   * 9) Enqueue the encrypted frame for sending.\r\n   */\r\n  protected async encodeFunction(\r\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\r\n    controller: TransformStreamDefaultController,\r\n  ) {\r\n    if (\r\n      !this.isEnabled() ||\r\n      // skip for encryption for empty dtx frames\r\n      encodedFrame.data.byteLength === 0\r\n    ) {\r\n      return controller.enqueue(encodedFrame);\r\n    }\r\n    const keySet = this.keys.getKeySet();\r\n    if (!keySet) {\r\n      throw new TypeError(\r\n        `key set not found for ${\r\n          this.participantIdentity\r\n        } at index ${this.keys.getCurrentKeyIndex()}`,\r\n      );\r\n    }\r\n    const { encryptionKey } = keySet;\r\n    const keyIndex = this.keys.getCurrentKeyIndex();\r\n\r\n    if (encryptionKey) {\r\n      const iv = this.makeIV(\r\n        encodedFrame.getMetadata().synchronizationSource ?? -1,\r\n        encodedFrame.timestamp,\r\n      );\r\n      let frameInfo = this.getUnencryptedBytes(encodedFrame);\r\n      // Thіs is not encrypted and contains the VP8 payload descriptor or the Opus TOC byte.\r\n      const frameHeader = new Uint8Array(encodedFrame.data, 0, frameInfo.unencryptedBytes);\r\n\r\n      // Frame trailer contains the R|IV_LENGTH and key index\r\n      const frameTrailer = new Uint8Array(2);\r\n\r\n      frameTrailer[0] = IV_LENGTH;\r\n      frameTrailer[1] = keyIndex;\r\n\r\n      // Construct frame trailer. Similar to the frame header described in\r\n      // https://tools.ietf.org/html/draft-omara-sframe-00#section-4.2\r\n      // but we put it at the end.\r\n      //\r\n      // ---------+-------------------------+-+---------+----\r\n      // payload  |IV...(length = IV_LENGTH)|R|IV_LENGTH|KID |\r\n      // ---------+-------------------------+-+---------+----\r\n      try {\r\n        const cipherText = await crypto.subtle.encrypt(\r\n          {\r\n            name: ENCRYPTION_ALGORITHM,\r\n            iv,\r\n            additionalData: new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength),\r\n          },\r\n          encryptionKey,\r\n          new Uint8Array(encodedFrame.data, frameInfo.unencryptedBytes),\r\n        );\r\n\r\n        let newDataWithoutHeader = new Uint8Array(\r\n          cipherText.byteLength + iv.byteLength + frameTrailer.byteLength,\r\n        );\r\n        newDataWithoutHeader.set(new Uint8Array(cipherText)); // add ciphertext.\r\n        newDataWithoutHeader.set(new Uint8Array(iv), cipherText.byteLength); // append IV.\r\n        newDataWithoutHeader.set(frameTrailer, cipherText.byteLength + iv.byteLength); // append frame trailer.\r\n\r\n        if (frameInfo.isH264) {\r\n          newDataWithoutHeader = writeRbsp(newDataWithoutHeader);\r\n        }\r\n\r\n        var newData = new Uint8Array(frameHeader.byteLength + newDataWithoutHeader.byteLength);\r\n        newData.set(frameHeader);\r\n        newData.set(newDataWithoutHeader, frameHeader.byteLength);\r\n\r\n        encodedFrame.data = newData.buffer;\r\n\r\n        return controller.enqueue(encodedFrame);\r\n      } catch (e: any) {\r\n        // TODO: surface this to the app.\r\n        workerLogger.error(e);\r\n      }\r\n    } else {\r\n      this.emit(\r\n        CryptorEvent.Error,\r\n        new CryptorError(`encryption key missing for encoding`, CryptorErrorReason.MissingKey),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function that will be injected in a stream and will decrypt the given encoded frames.\r\n   *\r\n   * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\r\n   * @param {TransformStreamDefaultController} controller - TransportStreamController.\r\n   */\r\n  protected async decodeFunction(\r\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\r\n    controller: TransformStreamDefaultController,\r\n  ) {\r\n    if (\r\n      !this.isEnabled() ||\r\n      // skip for decryption for empty dtx frames\r\n      encodedFrame.data.byteLength === 0\r\n    ) {\r\n      this.sifGuard.recordUserFrame();\r\n      return controller.enqueue(encodedFrame);\r\n    }\r\n\r\n    if (isFrameServerInjected(encodedFrame.data, this.sifTrailer)) {\r\n      this.sifGuard.recordSif();\r\n\r\n      if (this.sifGuard.isSifAllowed()) {\r\n        encodedFrame.data = encodedFrame.data.slice(\r\n          0,\r\n          encodedFrame.data.byteLength - this.sifTrailer.byteLength,\r\n        );\r\n        return controller.enqueue(encodedFrame);\r\n      } else {\r\n        workerLogger.warn('SIF limit reached, dropping frame');\r\n        return;\r\n      }\r\n    } else {\r\n      this.sifGuard.recordUserFrame();\r\n    }\r\n    const data = new Uint8Array(encodedFrame.data);\r\n    const keyIndex = data[encodedFrame.data.byteLength - 1];\r\n\r\n    if (this.keys.getKeySet(keyIndex) && this.keys.hasValidKey) {\r\n      try {\r\n        const decodedFrame = await this.decryptFrame(encodedFrame, keyIndex);\r\n        this.keys.decryptionSuccess();\r\n        if (decodedFrame) {\r\n          return controller.enqueue(decodedFrame);\r\n        }\r\n      } catch (error) {\r\n        if (error instanceof CryptorError && error.reason === CryptorErrorReason.InvalidKey) {\r\n          if (this.keys.hasValidKey) {\r\n            this.emit(CryptorEvent.Error, error);\r\n            this.keys.decryptionFailure();\r\n          }\r\n        } else {\r\n          workerLogger.warn('decoding frame failed', { error });\r\n        }\r\n      }\r\n    } else if (!this.keys.getKeySet(keyIndex) && this.keys.hasValidKey) {\r\n      // emit an error in case the key index is out of bounds but the key handler thinks we still have a valid key\r\n      workerLogger.warn('skipping decryption due to missing key at index');\r\n      this.emit(\r\n        CryptorEvent.Error,\r\n        new CryptorError(\r\n          `missing key at index for participant ${this.participantIdentity}`,\r\n          CryptorErrorReason.MissingKey,\r\n        ),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function that will decrypt the given encoded frame. If the decryption fails, it will\r\n   * ratchet the key for up to RATCHET_WINDOW_SIZE times.\r\n   */\r\n  private async decryptFrame(\r\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\r\n    keyIndex: number,\r\n    initialMaterial: KeySet | undefined = undefined,\r\n    ratchetOpts: DecodeRatchetOptions = { ratchetCount: 0 },\r\n  ): Promise<RTCEncodedVideoFrame | RTCEncodedAudioFrame | undefined> {\r\n    const keySet = this.keys.getKeySet(keyIndex);\r\n    if (!ratchetOpts.encryptionKey && !keySet) {\r\n      throw new TypeError(`no encryption key found for decryption of ${this.participantIdentity}`);\r\n    }\r\n    let frameInfo = this.getUnencryptedBytes(encodedFrame);\r\n    // Construct frame trailer. Similar to the frame header described in\r\n    // https://tools.ietf.org/html/draft-omara-sframe-00#section-4.2\r\n    // but we put it at the end.\r\n    //\r\n    // ---------+-------------------------+-+---------+----\r\n    // payload  |IV...(length = IV_LENGTH)|R|IV_LENGTH|KID |\r\n    // ---------+-------------------------+-+---------+----\r\n\r\n    try {\r\n      const frameHeader = new Uint8Array(encodedFrame.data, 0, frameInfo.unencryptedBytes);\r\n      var encryptedData = new Uint8Array(\r\n        encodedFrame.data,\r\n        frameHeader.length,\r\n        encodedFrame.data.byteLength - frameHeader.length,\r\n      );\r\n      if (frameInfo.isH264 && needsRbspUnescaping(encryptedData)) {\r\n        encryptedData = parseRbsp(encryptedData);\r\n        const newUint8 = new Uint8Array(frameHeader.byteLength + encryptedData.byteLength);\r\n        newUint8.set(frameHeader);\r\n        newUint8.set(encryptedData, frameHeader.byteLength);\r\n        encodedFrame.data = newUint8.buffer;\r\n      }\r\n\r\n      const frameTrailer = new Uint8Array(encodedFrame.data, encodedFrame.data.byteLength - 2, 2);\r\n\r\n      const ivLength = frameTrailer[0];\r\n      const iv = new Uint8Array(\r\n        encodedFrame.data,\r\n        encodedFrame.data.byteLength - ivLength - frameTrailer.byteLength,\r\n        ivLength,\r\n      );\r\n\r\n      const cipherTextStart = frameHeader.byteLength;\r\n      const cipherTextLength =\r\n        encodedFrame.data.byteLength -\r\n        (frameHeader.byteLength + ivLength + frameTrailer.byteLength);\r\n\r\n      const plainText = await crypto.subtle.decrypt(\r\n        {\r\n          name: ENCRYPTION_ALGORITHM,\r\n          iv,\r\n          additionalData: new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength),\r\n        },\r\n        ratchetOpts.encryptionKey ?? keySet!.encryptionKey,\r\n        new Uint8Array(encodedFrame.data, cipherTextStart, cipherTextLength),\r\n      );\r\n\r\n      const newData = new ArrayBuffer(frameHeader.byteLength + plainText.byteLength);\r\n      const newUint8 = new Uint8Array(newData);\r\n\r\n      newUint8.set(new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength));\r\n      newUint8.set(new Uint8Array(plainText), frameHeader.byteLength);\r\n\r\n      encodedFrame.data = newData;\r\n\r\n      return encodedFrame;\r\n    } catch (error: any) {\r\n      if (this.keyProviderOptions.ratchetWindowSize > 0) {\r\n        if (ratchetOpts.ratchetCount < this.keyProviderOptions.ratchetWindowSize) {\r\n          workerLogger.debug(\r\n            `ratcheting key attempt ${ratchetOpts.ratchetCount} of ${\r\n              this.keyProviderOptions.ratchetWindowSize\r\n            }, for kind ${encodedFrame instanceof RTCEncodedAudioFrame ? 'audio' : 'video'}`,\r\n          );\r\n\r\n          let ratchetedKeySet: KeySet | undefined;\r\n          if (keySet === this.keys.getKeySet(keyIndex)) {\r\n            // only ratchet if the currently set key is still the same as the one used to decrypt this frame\r\n            // if not, it might be that a different frame has already ratcheted and we try with that one first\r\n            const newMaterial = await this.keys.ratchetKey(keyIndex, false);\r\n\r\n            ratchetedKeySet = await deriveKeys(newMaterial, this.keyProviderOptions.ratchetSalt);\r\n          }\r\n\r\n          const frame = await this.decryptFrame(encodedFrame, keyIndex, initialMaterial || keySet, {\r\n            ratchetCount: ratchetOpts.ratchetCount + 1,\r\n            encryptionKey: ratchetedKeySet?.encryptionKey,\r\n          });\r\n          if (frame && ratchetedKeySet) {\r\n            this.keys.setKeySet(ratchetedKeySet, keyIndex, true);\r\n            // decryption was successful, set the new key index to reflect the ratcheted key set\r\n            this.keys.setCurrentKeyIndex(keyIndex);\r\n          }\r\n          return frame;\r\n        } else {\r\n          /**\r\n           * Since the key it is first send and only afterwards actually used for encrypting, there were\r\n           * situations when the decrypting failed due to the fact that the received frame was not encrypted\r\n           * yet and ratcheting, of course, did not solve the problem. So if we fail RATCHET_WINDOW_SIZE times,\r\n           * we come back to the initial key.\r\n           */\r\n          if (initialMaterial) {\r\n            workerLogger.debug('resetting to initial material');\r\n            this.keys.setKeyFromMaterial(initialMaterial.material, keyIndex);\r\n          }\r\n\r\n          workerLogger.warn('maximum ratchet attempts exceeded');\r\n          throw new CryptorError(\r\n            `valid key missing for participant ${this.participantIdentity}`,\r\n            CryptorErrorReason.InvalidKey,\r\n          );\r\n        }\r\n      } else {\r\n        throw new CryptorError(\r\n          `Decryption failed: ${error.message}`,\r\n          CryptorErrorReason.InvalidKey,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct the IV used for AES-GCM and sent (in plain) with the packet similar to\r\n   * https://tools.ietf.org/html/rfc7714#section-8.1\r\n   * It concatenates\r\n   * - the 32 bit synchronization source (SSRC) given on the encoded frame,\r\n   * - the 32 bit rtp timestamp given on the encoded frame,\r\n   * - a send counter that is specific to the SSRC. Starts at a random number.\r\n   * The send counter is essentially the pictureId but we currently have to implement this ourselves.\r\n   * There is no XOR with a salt. Note that this IV leaks the SSRC to the receiver but since this is\r\n   * randomly generated and SFUs may not rewrite this is considered acceptable.\r\n   * The SSRC is used to allow demultiplexing multiple streams with the same key, as described in\r\n   *   https://tools.ietf.org/html/rfc3711#section-4.1.1\r\n   * The RTP timestamp is 32 bits and advances by the codec clock rate (90khz for video, 48khz for\r\n   * opus audio) every second. For video it rolls over roughly every 13 hours.\r\n   * The send counter will advance at the frame rate (30fps for video, 50fps for 20ms opus audio)\r\n   * every second. It will take a long time to roll over.\r\n   *\r\n   * See also https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\r\n   */\r\n  private makeIV(synchronizationSource: number, timestamp: number) {\r\n    const iv = new ArrayBuffer(IV_LENGTH);\r\n    const ivView = new DataView(iv);\r\n\r\n    // having to keep our own send count (similar to a picture id) is not ideal.\r\n    if (!this.sendCounts.has(synchronizationSource)) {\r\n      // Initialize with a random offset, similar to the RTP sequence number.\r\n      this.sendCounts.set(synchronizationSource, Math.floor(Math.random() * 0xffff));\r\n    }\r\n\r\n    const sendCount = this.sendCounts.get(synchronizationSource) ?? 0;\r\n\r\n    ivView.setUint32(0, synchronizationSource);\r\n    ivView.setUint32(4, timestamp);\r\n    ivView.setUint32(8, timestamp - (sendCount % 0xffff));\r\n\r\n    this.sendCounts.set(synchronizationSource, sendCount + 1);\r\n\r\n    return iv;\r\n  }\r\n\r\n  private getUnencryptedBytes(frame: RTCEncodedVideoFrame | RTCEncodedAudioFrame): {\r\n    unencryptedBytes: number;\r\n    isH264: boolean;\r\n  } {\r\n    var frameInfo = { unencryptedBytes: 0, isH264: false };\r\n    if (isVideoFrame(frame)) {\r\n      let detectedCodec = this.getVideoCodec(frame) ?? this.videoCodec;\r\n\r\n      if (detectedCodec === 'av1' || detectedCodec === 'vp9') {\r\n        throw new Error(`${detectedCodec} is not yet supported for end to end encryption`);\r\n      }\r\n\r\n      if (detectedCodec === 'vp8') {\r\n        frameInfo.unencryptedBytes = UNENCRYPTED_BYTES[frame.type];\r\n        return frameInfo;\r\n      }\r\n\r\n      const data = new Uint8Array(frame.data);\r\n      try {\r\n        const naluIndices = findNALUIndices(data);\r\n\r\n        // if the detected codec is undefined we test whether it _looks_ like a h264 frame as a best guess\r\n        frameInfo.isH264 =\r\n          detectedCodec === 'h264' ||\r\n          naluIndices.some((naluIndex) =>\r\n            [NALUType.SLICE_IDR, NALUType.SLICE_NON_IDR].includes(parseNALUType(data[naluIndex])),\r\n          );\r\n\r\n        if (frameInfo.isH264) {\r\n          for (const index of naluIndices) {\r\n            let type = parseNALUType(data[index]);\r\n            switch (type) {\r\n              case NALUType.SLICE_IDR:\r\n              case NALUType.SLICE_NON_IDR:\r\n                frameInfo.unencryptedBytes = index + 2;\r\n                return frameInfo;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n          throw new TypeError('Could not find NALU');\r\n        }\r\n      } catch (e) {\r\n        // no op, we just continue and fallback to vp8\r\n      }\r\n\r\n      frameInfo.unencryptedBytes = UNENCRYPTED_BYTES[frame.type];\r\n      return frameInfo;\r\n    } else {\r\n      frameInfo.unencryptedBytes = UNENCRYPTED_BYTES.audio;\r\n      return frameInfo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * inspects frame payloadtype if available and maps it to the codec specified in rtpMap\r\n   */\r\n  private getVideoCodec(frame: RTCEncodedVideoFrame): VideoCodec | undefined {\r\n    if (this.rtpMap.size === 0) {\r\n      return undefined;\r\n    }\r\n    // @ts-expect-error payloadType is not yet part of the typescript definition and currently not supported in Safari\r\n    const payloadType = frame.getMetadata().payloadType;\r\n    const codec = payloadType ? this.rtpMap.get(payloadType) : undefined;\r\n    return codec;\r\n  }\r\n}\r\n\r\n/**\r\n * Slice the NALUs present in the supplied buffer, assuming it is already byte-aligned\r\n * code adapted from https://github.com/medooze/h264-frame-parser/blob/main/lib/NalUnits.ts to return indices only\r\n */\r\nexport function findNALUIndices(stream: Uint8Array): number[] {\r\n  const result: number[] = [];\r\n  let start = 0,\r\n    pos = 0,\r\n    searchLength = stream.length - 2;\r\n  while (pos < searchLength) {\r\n    // skip until end of current NALU\r\n    while (\r\n      pos < searchLength &&\r\n      !(stream[pos] === 0 && stream[pos + 1] === 0 && stream[pos + 2] === 1)\r\n    )\r\n      pos++;\r\n    if (pos >= searchLength) pos = stream.length;\r\n    // remove trailing zeros from current NALU\r\n    let end = pos;\r\n    while (end > start && stream[end - 1] === 0) end--;\r\n    // save current NALU\r\n    if (start === 0) {\r\n      if (end !== start) throw TypeError('byte stream contains leading data');\r\n    } else {\r\n      result.push(start);\r\n    }\r\n    // begin new NALU\r\n    start = pos = pos + 3;\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function parseNALUType(startByte: number): NALUType {\r\n  return startByte & kNaluTypeMask;\r\n}\r\n\r\nconst kNaluTypeMask = 0x1f;\r\n\r\nexport enum NALUType {\r\n  /** Coded slice of a non-IDR picture */\r\n  SLICE_NON_IDR = 1,\r\n  /** Coded slice data partition A */\r\n  SLICE_PARTITION_A = 2,\r\n  /** Coded slice data partition B */\r\n  SLICE_PARTITION_B = 3,\r\n  /** Coded slice data partition C */\r\n  SLICE_PARTITION_C = 4,\r\n  /** Coded slice of an IDR picture */\r\n  SLICE_IDR = 5,\r\n  /** Supplemental enhancement information */\r\n  SEI = 6,\r\n  /** Sequence parameter set */\r\n  SPS = 7,\r\n  /** Picture parameter set */\r\n  PPS = 8,\r\n  /** Access unit delimiter */\r\n  AUD = 9,\r\n  /** End of sequence */\r\n  END_SEQ = 10,\r\n  /** End of stream */\r\n  END_STREAM = 11,\r\n  /** Filler data */\r\n  FILLER_DATA = 12,\r\n  /** Sequence parameter set extension */\r\n  SPS_EXT = 13,\r\n  /** Prefix NAL unit */\r\n  PREFIX_NALU = 14,\r\n  /** Subset sequence parameter set */\r\n  SUBSET_SPS = 15,\r\n  /** Depth parameter set */\r\n  DPS = 16,\r\n\r\n  // 17, 18 reserved\r\n\r\n  /** Coded slice of an auxiliary coded picture without partitioning */\r\n  SLICE_AUX = 19,\r\n  /** Coded slice extension */\r\n  SLICE_EXT = 20,\r\n  /** Coded slice extension for a depth view component or a 3D-AVC texture view component */\r\n  SLICE_LAYER_EXT = 21,\r\n\r\n  // 22, 23 reserved\r\n}\r\n\r\n/**\r\n * we use a magic frame trailer to detect whether a frame is injected\r\n * by the livekit server and thus to be treated as unencrypted\r\n * @internal\r\n */\r\nexport function isFrameServerInjected(frameData: ArrayBuffer, trailerBytes: Uint8Array): boolean {\r\n  if (trailerBytes.byteLength === 0) {\r\n    return false;\r\n  }\r\n  const frameTrailer = new Uint8Array(\r\n    frameData.slice(frameData.byteLength - trailerBytes.byteLength),\r\n  );\r\n  return trailerBytes.every((value, index) => value === frameTrailer[index]);\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport type TypedEventEmitter from 'typed-emitter';\r\nimport { workerLogger } from '../../logger';\r\nimport { KEYRING_SIZE } from '../constants';\r\nimport { KeyHandlerEvent, type ParticipantKeyHandlerCallbacks } from '../events';\r\nimport type { KeyProviderOptions, KeySet } from '../types';\r\nimport { deriveKeys, importKey, ratchet } from '../utils';\r\n\r\n// TODO ParticipantKeyHandlers currently don't get destroyed on participant disconnect\r\n// we could do this by having a separate worker message on participant disconnected.\r\n\r\n/**\r\n * ParticipantKeyHandler is responsible for providing a cryptor instance with the\r\n * en-/decryption key of a participant. It assumes that all tracks of a specific participant\r\n * are encrypted with the same key.\r\n * Additionally it exposes a method to ratchet a key which can be used by the cryptor either automatically\r\n * if decryption fails or can be triggered manually on both sender and receiver side.\r\n *\r\n */\r\nexport class ParticipantKeyHandler extends (EventEmitter as new () => TypedEventEmitter<ParticipantKeyHandlerCallbacks>) {\r\n  private currentKeyIndex: number;\r\n\r\n  private cryptoKeyRing: Array<KeySet | undefined>;\r\n\r\n  private keyProviderOptions: KeyProviderOptions;\r\n\r\n  private ratchetPromiseMap: Map<number, Promise<CryptoKey>>;\r\n\r\n  private participantIdentity: string;\r\n\r\n  private decryptionFailureCount = 0;\r\n\r\n  private _hasValidKey: boolean = true;\r\n\r\n  get hasValidKey() {\r\n    return this._hasValidKey;\r\n  }\r\n\r\n  constructor(participantIdentity: string, keyProviderOptions: KeyProviderOptions) {\r\n    super();\r\n    this.currentKeyIndex = 0;\r\n    this.cryptoKeyRing = new Array(KEYRING_SIZE).fill(undefined);\r\n    this.keyProviderOptions = keyProviderOptions;\r\n    this.ratchetPromiseMap = new Map();\r\n    this.participantIdentity = participantIdentity;\r\n    this.resetKeyStatus();\r\n  }\r\n\r\n  decryptionFailure() {\r\n    if (this.keyProviderOptions.failureTolerance < 0) {\r\n      return;\r\n    }\r\n    this.decryptionFailureCount += 1;\r\n\r\n    if (this.decryptionFailureCount > this.keyProviderOptions.failureTolerance) {\r\n      workerLogger.warn(`key for ${this.participantIdentity} is being marked as invalid`);\r\n      this._hasValidKey = false;\r\n    }\r\n  }\r\n\r\n  decryptionSuccess() {\r\n    this.resetKeyStatus();\r\n  }\r\n\r\n  /**\r\n   * Call this after user initiated ratchet or a new key has been set in order to make sure to mark potentially\r\n   * invalid keys as valid again\r\n   */\r\n  resetKeyStatus() {\r\n    this.decryptionFailureCount = 0;\r\n    this._hasValidKey = true;\r\n  }\r\n\r\n  /**\r\n   * Ratchets the current key (or the one at keyIndex if provided) and\r\n   * returns the ratcheted material\r\n   * if `setKey` is true (default), it will also set the ratcheted key directly on the crypto key ring\r\n   * @param keyIndex\r\n   * @param setKey\r\n   */\r\n  ratchetKey(keyIndex?: number, setKey = true): Promise<CryptoKey> {\r\n    const currentKeyIndex = keyIndex ?? this.getCurrentKeyIndex();\r\n\r\n    const existingPromise = this.ratchetPromiseMap.get(currentKeyIndex);\r\n    if (typeof existingPromise !== 'undefined') {\r\n      return existingPromise;\r\n    }\r\n    const ratchetPromise = new Promise<CryptoKey>(async (resolve, reject) => {\r\n      try {\r\n        const keySet = this.getKeySet(currentKeyIndex);\r\n        if (!keySet) {\r\n          throw new TypeError(\r\n            `Cannot ratchet key without a valid keyset of participant ${this.participantIdentity}`,\r\n          );\r\n        }\r\n        const currentMaterial = keySet.material;\r\n        const newMaterial = await importKey(\r\n          await ratchet(currentMaterial, this.keyProviderOptions.ratchetSalt),\r\n          currentMaterial.algorithm.name,\r\n          'derive',\r\n        );\r\n\r\n        if (setKey) {\r\n          this.setKeyFromMaterial(newMaterial, currentKeyIndex, true);\r\n          this.emit(\r\n            KeyHandlerEvent.KeyRatcheted,\r\n            newMaterial,\r\n            this.participantIdentity,\r\n            currentKeyIndex,\r\n          );\r\n        }\r\n        resolve(newMaterial);\r\n      } catch (e) {\r\n        reject(e);\r\n      } finally {\r\n        this.ratchetPromiseMap.delete(currentKeyIndex);\r\n      }\r\n    });\r\n    this.ratchetPromiseMap.set(currentKeyIndex, ratchetPromise);\r\n    return ratchetPromise;\r\n  }\r\n\r\n  /**\r\n   * takes in a key material with `deriveBits` and `deriveKey` set as key usages\r\n   * and derives encryption keys from the material and sets it on the key ring buffer\r\n   * together with the material\r\n   * also resets the valid key property and updates the currentKeyIndex\r\n   */\r\n  async setKey(material: CryptoKey, keyIndex = 0) {\r\n    await this.setKeyFromMaterial(material, keyIndex);\r\n    this.resetKeyStatus();\r\n  }\r\n\r\n  /**\r\n   * takes in a key material with `deriveBits` and `deriveKey` set as key usages\r\n   * and derives encryption keys from the material and sets it on the key ring buffer\r\n   * together with the material\r\n   * also updates the currentKeyIndex\r\n   */\r\n  async setKeyFromMaterial(material: CryptoKey, keyIndex = 0, emitRatchetEvent = false) {\r\n    workerLogger.debug('setting new key');\r\n    if (keyIndex >= 0) {\r\n      this.currentKeyIndex = keyIndex % this.cryptoKeyRing.length;\r\n    }\r\n    const keySet = await deriveKeys(material, this.keyProviderOptions.ratchetSalt);\r\n    this.setKeySet(keySet, this.currentKeyIndex, emitRatchetEvent);\r\n  }\r\n\r\n  setKeySet(keySet: KeySet, keyIndex: number, emitRatchetEvent = false) {\r\n    this.cryptoKeyRing[keyIndex % this.cryptoKeyRing.length] = keySet;\r\n\r\n    if (emitRatchetEvent) {\r\n      this.emit(KeyHandlerEvent.KeyRatcheted, keySet.material, this.participantIdentity, keyIndex);\r\n    }\r\n  }\r\n\r\n  async setCurrentKeyIndex(index: number) {\r\n    this.currentKeyIndex = index % this.cryptoKeyRing.length;\r\n    this.resetKeyStatus();\r\n  }\r\n\r\n  getCurrentKeyIndex() {\r\n    return this.currentKeyIndex;\r\n  }\r\n\r\n  /**\r\n   * returns currently used KeySet or the one at `keyIndex` if provided\r\n   * @param keyIndex\r\n   * @returns\r\n   */\r\n  getKeySet(keyIndex?: number) {\r\n    return this.cryptoKeyRing[keyIndex ?? this.currentKeyIndex];\r\n  }\r\n}\r\n","import { workerLogger } from '../../logger';\r\nimport { KEY_PROVIDER_DEFAULTS } from '../constants';\r\nimport { CryptorErrorReason } from '../errors';\r\nimport { CryptorEvent, KeyHandlerEvent } from '../events';\r\nimport type {\r\n  E2EEWorkerMessage,\r\n  ErrorMessage,\r\n  InitAck,\r\n  KeyProviderOptions,\r\n  RatchetMessage,\r\n  RatchetRequestMessage,\r\n} from '../types';\r\nimport { FrameCryptor, encryptionEnabledMap } from './FrameCryptor';\r\nimport { ParticipantKeyHandler } from './ParticipantKeyHandler';\r\n\r\nconst participantCryptors: FrameCryptor[] = [];\r\nconst participantKeys: Map<string, ParticipantKeyHandler> = new Map();\r\nlet sharedKeyHandler: ParticipantKeyHandler | undefined;\r\n\r\nlet isEncryptionEnabled: boolean = false;\r\n\r\nlet useSharedKey: boolean = false;\r\n\r\nlet sharedKey: CryptoKey | undefined;\r\n\r\nlet sifTrailer: Uint8Array | undefined;\r\n\r\nlet keyProviderOptions: KeyProviderOptions = KEY_PROVIDER_DEFAULTS;\r\n\r\nworkerLogger.setDefaultLevel('info');\r\n\r\nonmessage = (ev) => {\r\n  const { kind, data }: E2EEWorkerMessage = ev.data;\r\n\r\n  switch (kind) {\r\n    case 'init':\r\n      workerLogger.info('worker initialized');\r\n      keyProviderOptions = data.keyProviderOptions;\r\n      useSharedKey = !!data.keyProviderOptions.sharedKey;\r\n      // acknowledge init successful\r\n      const ackMsg: InitAck = {\r\n        kind: 'initAck',\r\n        data: { enabled: isEncryptionEnabled },\r\n      };\r\n      postMessage(ackMsg);\r\n      break;\r\n    case 'enable':\r\n      setEncryptionEnabled(data.enabled, data.participantIdentity);\r\n      workerLogger.info('updated e2ee enabled status');\r\n      // acknowledge enable call successful\r\n      postMessage(ev.data);\r\n      break;\r\n    case 'decode':\r\n      let cryptor = getTrackCryptor(data.participantIdentity, data.trackId);\r\n      cryptor.setupTransform(\r\n        kind,\r\n        data.readableStream,\r\n        data.writableStream,\r\n        data.trackId,\r\n        data.codec,\r\n      );\r\n      break;\r\n    case 'encode':\r\n      let pubCryptor = getTrackCryptor(data.participantIdentity, data.trackId);\r\n      pubCryptor.setupTransform(\r\n        kind,\r\n        data.readableStream,\r\n        data.writableStream,\r\n        data.trackId,\r\n        data.codec,\r\n      );\r\n      break;\r\n    case 'setKey':\r\n      if (useSharedKey) {\r\n        workerLogger.warn('set shared key');\r\n        setSharedKey(data.key, data.keyIndex);\r\n      } else if (data.participantIdentity) {\r\n        workerLogger.warn(`set participant sender key ${data.participantIdentity}`);\r\n        getParticipantKeyHandler(data.participantIdentity).setKey(data.key, data.keyIndex);\r\n      } else {\r\n        workerLogger.error('no participant Id was provided and shared key usage is disabled');\r\n      }\r\n      break;\r\n    case 'removeTransform':\r\n      unsetCryptorParticipant(data.trackId);\r\n      break;\r\n    case 'updateCodec':\r\n      getTrackCryptor(data.participantIdentity, data.trackId).setVideoCodec(data.codec);\r\n      break;\r\n    case 'setRTPMap':\r\n      // this is only used for the local participant\r\n      participantCryptors.forEach((cr) => {\r\n        if (cr.getParticipantIdentity() === data.participantIdentity) {\r\n          cr.setRtpMap(data.map);\r\n        }\r\n      });\r\n      break;\r\n    case 'ratchetRequest':\r\n      handleRatchetRequest(data);\r\n      break;\r\n    case 'setSifTrailer':\r\n      handleSifTrailer(data.trailer);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nasync function handleRatchetRequest(data: RatchetRequestMessage['data']) {\r\n  if (useSharedKey) {\r\n    const keyHandler = getSharedKeyHandler();\r\n    await keyHandler.ratchetKey(data.keyIndex);\r\n    keyHandler.resetKeyStatus();\r\n  } else if (data.participantIdentity) {\r\n    const keyHandler = getParticipantKeyHandler(data.participantIdentity);\r\n    await keyHandler.ratchetKey(data.keyIndex);\r\n    keyHandler.resetKeyStatus();\r\n  } else {\r\n    workerLogger.error(\r\n      'no participant Id was provided for ratchet request and shared key usage is disabled',\r\n    );\r\n  }\r\n}\r\n\r\nfunction getTrackCryptor(participantIdentity: string, trackId: string) {\r\n  let cryptor = participantCryptors.find((c) => c.getTrackId() === trackId);\r\n  if (!cryptor) {\r\n    workerLogger.info('creating new cryptor for', { participantIdentity });\r\n    if (!keyProviderOptions) {\r\n      throw Error('Missing keyProvider options');\r\n    }\r\n    cryptor = new FrameCryptor({\r\n      participantIdentity,\r\n      keys: getParticipantKeyHandler(participantIdentity),\r\n      keyProviderOptions,\r\n      sifTrailer,\r\n    });\r\n\r\n    setupCryptorErrorEvents(cryptor);\r\n    participantCryptors.push(cryptor);\r\n  } else if (participantIdentity !== cryptor.getParticipantIdentity()) {\r\n    // assign new participant id to track cryptor and pass in correct key handler\r\n    cryptor.setParticipant(participantIdentity, getParticipantKeyHandler(participantIdentity));\r\n  }\r\n  if (sharedKey) {\r\n  }\r\n  return cryptor;\r\n}\r\n\r\nfunction getParticipantKeyHandler(participantIdentity: string) {\r\n  if (useSharedKey) {\r\n    return getSharedKeyHandler();\r\n  }\r\n  let keys = participantKeys.get(participantIdentity);\r\n  if (!keys) {\r\n    keys = new ParticipantKeyHandler(participantIdentity, keyProviderOptions);\r\n    if (sharedKey) {\r\n      keys.setKey(sharedKey);\r\n    }\r\n    keys.on(KeyHandlerEvent.KeyRatcheted, emitRatchetedKeys);\r\n    participantKeys.set(participantIdentity, keys);\r\n  }\r\n  return keys;\r\n}\r\n\r\nfunction getSharedKeyHandler() {\r\n  if (!sharedKeyHandler) {\r\n    sharedKeyHandler = new ParticipantKeyHandler('shared-key', keyProviderOptions);\r\n  }\r\n  return sharedKeyHandler;\r\n}\r\n\r\nfunction unsetCryptorParticipant(trackId: string) {\r\n  participantCryptors.find((c) => c.getTrackId() === trackId)?.unsetParticipant();\r\n}\r\n\r\nfunction setEncryptionEnabled(enable: boolean, participantIdentity: string) {\r\n  encryptionEnabledMap.set(participantIdentity, enable);\r\n}\r\n\r\nfunction setSharedKey(key: CryptoKey, index?: number) {\r\n  workerLogger.debug('setting shared key');\r\n  sharedKey = key;\r\n  getSharedKeyHandler().setKey(key, index);\r\n}\r\n\r\nfunction setupCryptorErrorEvents(cryptor: FrameCryptor) {\r\n  cryptor.on(CryptorEvent.Error, (error) => {\r\n    const msg: ErrorMessage = {\r\n      kind: 'error',\r\n      data: { error: new Error(`${CryptorErrorReason[error.reason]}: ${error.message}`) },\r\n    };\r\n    postMessage(msg);\r\n  });\r\n}\r\n\r\nfunction emitRatchetedKeys(material: CryptoKey, participantIdentity: string, keyIndex?: number) {\r\n  const msg: RatchetMessage = {\r\n    kind: `ratchetKey`,\r\n    data: {\r\n      participantIdentity,\r\n      keyIndex,\r\n      material,\r\n    },\r\n  };\r\n  postMessage(msg);\r\n}\r\n\r\nfunction handleSifTrailer(trailer: Uint8Array) {\r\n  sifTrailer = trailer;\r\n  participantCryptors.forEach((c) => {\r\n    c.setSifTrailer(trailer);\r\n  });\r\n}\r\n\r\n// Operations using RTCRtpScriptTransform.\r\n// @ts-ignore\r\nif (self.RTCTransformEvent) {\r\n  workerLogger.debug('setup transform event');\r\n  // @ts-ignore\r\n  self.onrtctransform = (event) => {\r\n    const transformer = event.transformer;\r\n    workerLogger.debug('transformer', transformer);\r\n    transformer.handled = true;\r\n    const { kind, participantIdentity, trackId, codec } = transformer.options;\r\n    const cryptor = getTrackCryptor(participantIdentity, trackId);\r\n    workerLogger.debug('transform', { codec });\r\n    cryptor.setupTransform(kind, transformer.readable, transformer.writable, trackId, codec);\r\n  };\r\n}\r\n"],"names":["root","definition","this","noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","replaceLoggingMethods","level","loggerName","i","length","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","undefined","realMethod","Logger","name","defaultLevel","factory","currentLevel","self","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","document","location","indexOf","encodeURIComponent","exec","slice","levels","TRACE","DEBUG","INFO","WARN","ERROR","SILENT","getLevel","setLevel","persist","toUpperCase","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","resetLevel","removeItem","clearPersistedLevel","enableAll","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict","getLoggers","exports","module","LogLevel","info","workerLogger","ENCRYPTION_ALGORITHM","UNENCRYPTED_BYTES","key","delta","audio","empty","KEY_PROVIDER_DEFAULTS","sharedKey","ratchetSalt","ratchetWindowSize","failureTolerance","LivekitError","Error","constructor","code","message","super","MediaDeviceFailure","CryptorErrorReason","KeyProviderEvent","KeyHandlerEvent","EncryptionEvent","CryptorEvent","getFailure","error","NotFound","PermissionDenied","DeviceInUse","Other","CryptorError","reason","InternalError","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","args","ownKeys","Object","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","value","EventEmitter","init","eventsModule","once","emitter","Promise","resolve","reject","errorListener","err","removeListener","resolver","eventTargetAgnosticAddListener","handler","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","_getMaxListeners","that","_addListener","type","prepend","m","events","existing","warning","create","newListener","emit","unshift","push","warned","w","String","count","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","arr","ret","Array","unwrapListeners","arrayClone","listenerCount","n","copy","addEventListener","wrapListener","arg","removeEventListener","defineProperty","enumerable","get","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","keys","rawListeners","eventNames","AudioPresets","getAlgoOptions","algorithmName","salt","encodedSalt","TextEncoder","encode","hash","ArrayBuffer","iterations","deriveKeys","material","algorithmOptions","algorithm","encryptionKey","crypto","subtle","deriveKey","telephone","maxBitrate","speech","music","musicStereo","musicHighQuality","musicHighQualityStereo","SifGuard","consecutiveSifCount","lastSifReceivedAt","userFramesSinceSif","recordSif","_a","sifSequenceStartedAt","Date","now","recordUserFrame","reset","isSifAllowed","encryptionEnabledMap","Map","BaseFrameCryptor","encodeFunction","encodedFrame","controller","decodeFunction","FrameCryptor","opts","sendCounts","participantIdentity","rtpMap","keyProviderOptions","sifTrailer","Uint8Array","from","sifGuard","setParticipant","id","unsetParticipant","isEnabled","getParticipantIdentity","getTrackId","trackId","setVideoCodec","codec","videoCodec","setRtpMap","map","setupTransform","operation","readable","writable","transformFn","transformStream","TransformStream","transform","pipeThrough","pipeTo","catch","setSifTrailer","trailer","data","byteLength","enqueue","keySet","getKeySet","getCurrentKeyIndex","keyIndex","iv","makeIV","getMetadata","synchronizationSource","timestamp","frameInfo","getUnencryptedBytes","frameHeader","unencryptedBytes","frameTrailer","cipherText","encrypt","additionalData","newDataWithoutHeader","isH264","data_in","dataOut","numConsecutiveZeros","byte","writeRbsp","newData","buffer","MissingKey","frameData","trailerBytes","every","isFrameServerInjected","hasValidKey","decodedFrame","decryptFrame","decryptionSuccess","InvalidKey","decryptionFailure","initialMaterial","ratchetOpts","ratchetCount","encryptedData","needsRbspUnescaping","stream","parseRbsp","newUint8","ivLength","cipherTextStart","cipherTextLength","plainText","decrypt","ratchetedKeySet","RTCEncodedAudioFrame","newMaterial","ratchetKey","frame","setKeySet","setCurrentKeyIndex","setKeyFromMaterial","ivView","DataView","has","Math","floor","random","sendCount","setUint32","isVideoFrame","detectedCodec","getVideoCodec","naluIndices","result","start","pos","searchLength","end","findNALUIndices","some","naluIndex","NALUType","SLICE_IDR","SLICE_NON_IDR","includes","parseNALUType","size","payloadType","startByte","kNaluTypeMask","ParticipantKeyHandler","_hasValidKey","decryptionFailureCount","currentKeyIndex","cryptoKeyRing","fill","ratchetPromiseMap","resetKeyStatus","setKey","existingPromise","ratchetPromise","__awaiter","currentMaterial","keyBytes","usage","importKey","deriveBits","ratchet","KeyRatcheted","delete","emitRatchetEvent","participantCryptors","participantKeys","sharedKeyHandler","useSharedKey","getTrackCryptor","cryptor","find","c","getParticipantKeyHandler","msg","kind","postMessage","setupCryptorErrorEvents","getSharedKeyHandler","emitRatchetedKeys","onmessage","ev","enabled","enable","readableStream","writableStream","forEach","cr","keyHandler","handleRatchetRequest","RTCTransformEvent","onrtctransform","event","transformer","handled","options"],"mappings":"sYAMWA,EAAMC,kKAAND,EASTE,EATeD,EAST,WAIJ,IAAIE,EAAO,aACPC,EAAgB,YAChBC,SAAeC,SAAWF,UAA0BE,OAAOC,YAAcH,GACzE,kBAAkBI,KAAKF,OAAOC,UAAUE,WAGxCC,EAAa,CACb,QACA,QACA,OACA,OACA,SAIJ,SAASC,EAAWC,EAAKC,GACrB,IAAIC,EAASF,EAAIC,GACjB,GAA2B,mBAAhBC,EAAOC,KACd,OAAOD,EAAOC,KAAKH,GAEnB,IACI,OAAOI,SAASC,UAAUF,KAAKG,KAAKJ,EAAQF,EAC/C,CAAC,MAAOO,GAEL,OAAO,WACH,OAAOH,SAASC,UAAUG,MAAMA,MAAMN,EAAQ,CAACF,EAAKS,YAE3D,CAER,CAGD,SAASC,IACDC,QAAQC,MACJD,QAAQC,IAAIJ,MACZG,QAAQC,IAAIJ,MAAMG,QAASF,WAG3BL,SAASC,UAAUG,MAAMA,MAAMG,QAAQC,IAAK,CAACD,QAASF,aAG1DE,QAAQE,OAAOF,QAAQE,OAC9B,CAwBD,SAASC,EAAsBC,EAAOC,GAElC,IAAK,IAAIC,EAAI,EAAGA,EAAInB,EAAWoB,OAAQD,IAAK,CACxC,IAAIhB,EAAaH,EAAWmB,GAC5B3B,KAAKW,GAAegB,EAAIF,EACpBxB,EACAD,KAAK6B,cAAclB,EAAYc,EAAOC,EAC7C,CAGD1B,KAAKsB,IAAMtB,KAAK8B,KACnB,CAID,SAASC,EAAgCpB,EAAYc,EAAOC,GACxD,OAAO,kBACQL,UAAYnB,IACnBsB,EAAsBR,KAAKhB,KAAMyB,EAAOC,GACxC1B,KAAKW,GAAYO,MAAMlB,KAAMmB,YAGxC,CAID,SAASa,EAAqBrB,EAAYc,EAAOC,GAE7C,OAhDJ,SAAoBf,GAKhB,MAJmB,UAAfA,IACAA,EAAa,cAGNU,UAAYnB,IAEG,UAAfS,GAA0BR,EAC1BiB,OACwBa,IAAxBZ,QAAQV,GACRF,EAAWY,QAASV,QACJsB,IAAhBZ,QAAQC,IACRb,EAAWY,QAAS,OAEpBpB,EAEd,CAgCUiC,CAAWvB,IACXoB,EAAgCb,MAAMlB,KAAMmB,UACtD,CAED,SAASgB,EAAOC,EAAMC,EAAcC,GAClC,IACIC,EADAC,EAAOxC,KAEXqC,EAA+B,MAAhBA,EAAuB,OAASA,EAE/C,IAAII,EAAa,WAyBjB,SAASC,IACL,IAAIC,EAEJ,UAAWvC,SAAWF,GAAkBuC,EAAxC,CAEA,IACIE,EAAcvC,OAAOwC,aAAaH,EAChD,CAAY,MAAOI,GAAU,CAGnB,UAAWF,IAAgBzC,EACvB,IACI,IAAI4C,EAAS1C,OAAO2C,SAASD,OACzBE,EAAWF,EAAOG,QAClBC,mBAAmBT,GAAc,MACnB,IAAdO,IACAL,EAAc,WAAWQ,KAAKL,EAAOM,MAAMJ,IAAW,GAE5E,CAAgB,MAAOH,GAAU,CAQvB,YAJiCZ,IAA7BO,EAAKa,OAAOV,KACZA,OAAcV,GAGXU,CAvB6C,CAwBvD,CAnDmB,iBAATP,EACTK,GAAc,IAAML,EACK,iBAATA,IAChBK,OAAaR,GAwEfO,EAAKJ,KAAOA,EAEZI,EAAKa,OAAS,CAAEC,MAAS,EAAGC,MAAS,EAAGC,KAAQ,EAAGC,KAAQ,EACvDC,MAAS,EAAGC,OAAU,GAE1BnB,EAAKX,cAAgBS,GAAWN,EAEhCQ,EAAKoB,SAAW,WACZ,OAAOrB,GAGXC,EAAKqB,SAAW,SAAUpC,EAAOqC,GAI7B,GAHqB,iBAAVrC,QAA2DQ,IAArCO,EAAKa,OAAO5B,EAAMsC,iBAC/CtC,EAAQe,EAAKa,OAAO5B,EAAMsC,kBAET,iBAAVtC,GAAsBA,GAAS,GAAKA,GAASe,EAAKa,OAAOM,QAUhE,KAAM,6CAA+ClC,EAJrD,GALAc,EAAed,GACC,IAAZqC,GAtFZ,SAAgCE,GAC5B,IAAIC,GAAazD,EAAWwD,IAAa,UAAUD,cAEnD,UAAW3D,SAAWF,GAAkBuC,EAAxC,CAGA,IAEI,YADArC,OAAOwC,aAAaH,GAAcwB,EAEhD,CAAY,MAAOpB,GAAU,CAGnB,IACIzC,OAAO2C,SAASD,OACdI,mBAAmBT,GAAc,IAAMwB,EAAY,GACnE,CAAY,MAAOpB,GAAU,CAZiC,CAavD,CAuEWqB,CAAuBzC,GAE3BD,EAAsBR,KAAKwB,EAAMf,EAAOW,UAC7Bf,UAAYnB,GAAiBuB,EAAQe,EAAKa,OAAOM,OACxD,MAAO,oCAOnBnB,EAAK2B,gBAAkB,SAAU1C,GAC7BY,EAAeZ,EACViB,KACDF,EAAKqB,SAASpC,GAAO,IAI7Be,EAAK4B,WAAa,WACd5B,EAAKqB,SAASxB,GAAc,GA3DhC,WACI,UAAWjC,SAAWF,GAAkBuC,EAAxC,CAGA,IAEI,YADArC,OAAOwC,aAAayB,WAAW5B,EAE7C,CAAY,MAAOI,GAAU,CAGnB,IACIzC,OAAO2C,SAASD,OACdI,mBAAmBT,GAAc,0CACjD,CAAY,MAAOI,GAAU,CAZiC,CAavD,CA8CGyB,IAGJ9B,EAAK+B,UAAY,SAAST,GACtBtB,EAAKqB,SAASrB,EAAKa,OAAOC,MAAOQ,IAGrCtB,EAAKgC,WAAa,SAASV,GACvBtB,EAAKqB,SAASrB,EAAKa,OAAOM,OAAQG,IAItC,IAAIW,EAAe/B,IACC,MAAhB+B,IACAA,EAAepC,GAEnBG,EAAKqB,SAASY,GAAc,EAC7B,CAQD,IAAIC,EAAgB,IAAIvC,EAEpBwC,EAAiB,CAAA,EACrBD,EAAcE,UAAY,SAAmBxC,GACzC,GAAqB,iBAATA,GAAqC,iBAATA,GAA+B,KAATA,EAC5D,MAAM,IAAIyC,UAAU,kDAGtB,IAAIC,EAASH,EAAevC,GAK5B,OAJK0C,IACHA,EAASH,EAAevC,GAAQ,IAAID,EAClCC,EAAMsC,EAAcd,WAAYc,EAAc7C,gBAE3CiD,GAIX,IAAIC,SAAe3E,SAAWF,EAAiBE,OAAOkB,SAAMW,EAiB5D,OAhBAyC,EAAcM,WAAa,WAMvB,cALW5E,SAAWF,GACfE,OAAOkB,MAAQoD,IAClBtE,OAAOkB,IAAMyD,GAGVL,GAGXA,EAAcO,WAAa,WACvB,OAAON,GAIXD,EAAuB,QAAIA,EAEpBA,CACX,QA9RoDQ,QAC5CC,EAAAD,QAAiBnF,IAEjBD,EAAKwB,IAAMvB,QCXPqF,eAAZ,SAAYA,GACVA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,OAAA,GAAA,QACD,CAPD,CAAYA,IAAAA,EAOX,CAAA,IAaqB9D,EAAAA,UAAc,WAEtB6C,gBAAgBiB,EAASC,MAuChC,MAAMC,EAAehE,EAAasD,UAAC,WC7D7BW,EAAuB,UAoBvBC,EAAoB,CAC/BC,IAAK,GACLC,MAAO,EACPC,MAAO,EACPC,MAAO,GAYIC,EAA4C,CACvDC,WAAW,EACXC,YAJkB,uBAKlBC,kBAAmB,EACnBC,iBAhC0C,ICVtC,MAAOC,UAAqBC,MAGhCC,YAAYC,EAAcC,GACxBC,MAAMD,GAAW,wBACjBtG,KAAKqG,KAAOA,CACd,EA0DF,IAAYG,EC9DAC,ECEAC,EAYAC,EAYAC,EAiBAC,GFmBZ,SAAYL,GAEVA,EAAA,iBAAA,mBAEAA,EAAA,SAAA,WAEAA,EAAA,YAAA,cACAA,EAAA,MAAA,OACD,CARD,CAAYA,IAAAA,EAQX,CAAA,IAED,SAAiBA,GACCA,EAAAM,WAAhB,SAA2BC,GACzB,GAAIA,GAAS,SAAUA,EACrB,MAAmB,kBAAfA,EAAM3E,MAA2C,yBAAf2E,EAAM3E,KACnCoE,EAAmBQ,SAET,oBAAfD,EAAM3E,MAA6C,0BAAf2E,EAAM3E,KACrCoE,EAAmBS,iBAET,qBAAfF,EAAM3E,MAA8C,oBAAf2E,EAAM3E,KACtCoE,EAAmBU,YAErBV,EAAmBW,KAE9B,CACD,CAfD,CAAiBX,IAAAA,EAehB,CAAA,ICvFD,SAAYC,GACVA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,cAAA,GAAA,eACD,CAJD,CAAYA,IAAAA,EAIX,CAAA,IAEK,MAAOW,UAAqBlB,EAGhCE,YAAYE,GAA+E,IAA7De,EAA6BlG,UAAAS,OAAAT,QAAAc,IAAAd,UAAAc,GAAAd,UAAAsF,GAAAA,EAAmBa,cAC5Ef,MAAM,GAAID,GACVtG,KAAKqH,OAASA,CAChB,GCVF,SAAYX,GACVA,EAAA,OAAA,SACAA,EAAA,eAAA,iBACAA,EAAA,aAAA,cACD,CAJD,CAAYA,IAAAA,EAIX,CAAA,IAQD,SAAYC,GACVA,EAAA,aAAA,cACD,CAFD,CAAYA,IAAAA,EAEX,CAAA,IAUD,SAAYC,GACVA,EAAA,mCAAA,qCACAA,EAAA,gBAAA,iBACD,CAHD,CAAYA,IAAAA,EAGX,CAAA,IAcD,SAAYC,GACVA,EAAA,MAAA,cACD,CAFD,CAAYA,IAAAA,EAEX,CAAA,QCjBGU,iBAPAC,EAAuB,iBAAZC,QAAuBA,QAAU,KAC5CC,EAAeF,GAAwB,mBAAZA,EAAEtG,MAC7BsG,EAAEtG,MACF,SAAsByG,EAAQC,EAAUC,GACxC,OAAO/G,SAASC,UAAUG,MAAMF,KAAK2G,EAAQC,EAAUC,EACxD,EAIDN,EADEC,GAA0B,mBAAdA,EAAEM,QACCN,EAAEM,QACVC,OAAOC,sBACC,SAAwBL,GACvC,OAAOI,OAAOE,oBAAoBN,GAC/BO,OAAOH,OAAOC,sBAAsBL,KAGxB,SAAwBA,GACvC,OAAOI,OAAOE,oBAAoBN,IAQtC,IAAIQ,EAAcC,OAAOC,OAAS,SAAqBC,GACrD,OAAOA,GAAUA,CACnB,EAEA,SAASC,IACPA,EAAaC,KAAKxH,KAAKhB,KACzB,CACAyI,EAAcvD,QAAGqD,EACEE,EAAAvD,QAAAwD,KAwYnB,SAAcC,EAASvG,GACrB,OAAO,IAAIwG,SAAQ,SAAUC,EAASC,GACpC,SAASC,EAAcC,GACrBL,EAAQM,eAAe7G,EAAM8G,GAC7BJ,EAAOE,EACR,CAED,SAASE,IAC+B,mBAA3BP,EAAQM,gBACjBN,EAAQM,eAAe,QAASF,GAElCF,EAAQ,GAAGzF,MAAMpC,KAAKG,WAC5B,CAEIgI,EAA+BR,EAASvG,EAAM8G,EAAU,CAAER,MAAM,IACnD,UAATtG,GAMR,SAAuCuG,EAASS,EAASC,GAC7B,mBAAfV,EAAQW,IACjBH,EAA+BR,EAAS,QAASS,EAASC,EAE9D,CATME,CAA8BZ,EAASI,EAAe,CAAEL,MAAM,GAEpE,GACA,EAxZAH,EAAaA,aAAeA,EAE5BA,EAAaxH,UAAUyI,aAAUvH,EACjCsG,EAAaxH,UAAU0I,aAAe,EACtClB,EAAaxH,UAAU2I,mBAAgBzH,EAIvC,IAAI0H,EAAsB,GAE1B,SAASC,EAAcC,GACrB,GAAwB,mBAAbA,EACT,MAAM,IAAIhF,UAAU,0EAA4EgF,EAEpG,CAoCA,SAASC,EAAiBC,GACxB,YAA2B9H,IAAvB8H,EAAKL,cACAnB,EAAaoB,oBACfI,EAAKL,aACd,CAkDA,SAASM,EAAarC,EAAQsC,EAAMJ,EAAUK,GAC5C,IAAIC,EACAC,EACAC,EA1HsBC,EAgJ1B,GApBAV,EAAcC,QAGC5H,KADfmI,EAASzC,EAAO6B,UAEdY,EAASzC,EAAO6B,QAAUzB,OAAOwC,OAAO,MACxC5C,EAAO8B,aAAe,SAIKxH,IAAvBmI,EAAOI,cACT7C,EAAO8C,KAAK,cAAeR,EACfJ,EAASA,SAAWA,EAASA,SAAWA,GAIpDO,EAASzC,EAAO6B,SAElBa,EAAWD,EAAOH,SAGHhI,IAAboI,EAEFA,EAAWD,EAAOH,GAAQJ,IACxBlC,EAAO8B,kBAeT,GAbwB,mBAAbY,EAETA,EAAWD,EAAOH,GAChBC,EAAU,CAACL,EAAUQ,GAAY,CAACA,EAAUR,GAErCK,EACTG,EAASK,QAAQb,GAEjBQ,EAASM,KAAKd,IAIhBM,EAAIL,EAAiBnC,IACb,GAAK0C,EAASzI,OAASuI,IAAME,EAASO,OAAQ,CACpDP,EAASO,QAAS,EAGlB,IAAIC,EAAI,IAAI1E,MAAM,+CACEkE,EAASzI,OAAS,IAAMkJ,OAAOb,GADjC,qEAIlBY,EAAEzI,KAAO,8BACTyI,EAAElC,QAAUhB,EACZkD,EAAEZ,KAAOA,EACTY,EAAEE,MAAQV,EAASzI,OA7KG0I,EA8KHO,EA7KnBxJ,SAAWA,QAAQ2J,MAAM3J,QAAQ2J,KAAKV,EA8KvC,CAGH,OAAO3C,CACT,CAaA,SAASsD,IACP,IAAKjL,KAAKkL,MAGR,OAFAlL,KAAK2H,OAAOsB,eAAejJ,KAAKiK,KAAMjK,KAAKmL,QAC3CnL,KAAKkL,OAAQ,EACY,IAArB/J,UAAUS,OACL5B,KAAK6J,SAAS7I,KAAKhB,KAAK2H,QAC1B3H,KAAK6J,SAAS3I,MAAMlB,KAAK2H,OAAQxG,UAE5C,CAEA,SAASiK,EAAUzD,EAAQsC,EAAMJ,GAC/B,IAAIwB,EAAQ,CAAEH,OAAO,EAAOC,YAAQlJ,EAAW0F,OAAQA,EAAQsC,KAAMA,EAAMJ,SAAUA,GACjFyB,EAAUL,EAAYpK,KAAKwK,GAG/B,OAFAC,EAAQzB,SAAWA,EACnBwB,EAAMF,OAASG,EACRA,CACT,CAyHA,SAASC,EAAW5D,EAAQsC,EAAMuB,GAChC,IAAIpB,EAASzC,EAAO6B,QAEpB,QAAevH,IAAXmI,EACF,MAAO,GAET,IAAIqB,EAAarB,EAAOH,GACxB,YAAmBhI,IAAfwJ,EACK,GAEiB,mBAAfA,EACFD,EAAS,CAACC,EAAW5B,UAAY4B,GAAc,CAACA,GAElDD,EAsDT,SAAyBE,GAEvB,IADA,IAAIC,EAAM,IAAIC,MAAMF,EAAI9J,QACfD,EAAI,EAAGA,EAAIgK,EAAI/J,SAAUD,EAChCgK,EAAIhK,GAAK+J,EAAI/J,GAAGkI,UAAY6B,EAAI/J,GAElC,OAAOgK,CACT,CA3DIE,CAAgBJ,GAAcK,EAAWL,EAAYA,EAAW7J,OACpE,CAmBA,SAASmK,EAAc9B,GACrB,IAAIG,EAASpK,KAAKwJ,QAElB,QAAevH,IAAXmI,EAAsB,CACxB,IAAIqB,EAAarB,EAAOH,GAExB,GAA0B,mBAAfwB,EACT,OAAO,EACF,QAAmBxJ,IAAfwJ,EACT,OAAOA,EAAW7J,MAErB,CAED,OAAO,CACT,CAMA,SAASkK,EAAWJ,EAAKM,GAEvB,IADA,IAAIC,EAAO,IAAIL,MAAMI,GACZrK,EAAI,EAAGA,EAAIqK,IAAKrK,EACvBsK,EAAKtK,GAAK+J,EAAI/J,GAChB,OAAOsK,CACT,CA2CA,SAAS9C,EAA+BR,EAASvG,EAAMyH,EAAUR,GAC/D,GAA0B,mBAAfV,EAAQW,GACbD,EAAMX,KACRC,EAAQD,KAAKtG,EAAMyH,GAEnBlB,EAAQW,GAAGlH,EAAMyH,OAEd,IAAwC,mBAA7BlB,EAAQuD,iBAYxB,MAAM,IAAIrH,UAAU,6EAA+E8D,GATnGA,EAAQuD,iBAAiB9J,GAAM,SAAS+J,EAAaC,GAG/C/C,EAAMX,MACRC,EAAQ0D,oBAAoBjK,EAAM+J,GAEpCtC,EAASuC,EACf,GAGG,CACH,CAraArE,OAAOuE,eAAe/D,EAAc,sBAAuB,CACzDgE,YAAY,EACZC,IAAK,WACH,OAAO7C,CACR,EACD8C,IAAK,SAASL,GACZ,GAAmB,iBAARA,GAAoBA,EAAM,GAAKjE,EAAYiE,GACpD,MAAM,IAAIM,WAAW,kGAAoGN,EAAM,KAEjIzC,EAAsByC,CACvB,IAGH7D,EAAaC,KAAO,gBAEGvG,IAAjBjC,KAAKwJ,SACLxJ,KAAKwJ,UAAYzB,OAAO4E,eAAe3M,MAAMwJ,UAC/CxJ,KAAKwJ,QAAUzB,OAAOwC,OAAO,MAC7BvK,KAAKyJ,aAAe,GAGtBzJ,KAAK0J,cAAgB1J,KAAK0J,oBAAiBzH,CAC7C,EAIAsG,EAAaxH,UAAU6L,gBAAkB,SAAyBZ,GAChE,GAAiB,iBAANA,GAAkBA,EAAI,GAAK7D,EAAY6D,GAChD,MAAM,IAAIU,WAAW,gFAAkFV,EAAI,KAG7G,OADAhM,KAAK0J,cAAgBsC,EACdhM,IACT,EAQAuI,EAAaxH,UAAU8L,gBAAkB,WACvC,OAAO/C,EAAiB9J,KAC1B,EAEAuI,EAAaxH,UAAU0J,KAAO,SAAcR,GAE1C,IADA,IAAIpC,EAAO,GACFlG,EAAI,EAAGA,EAAIR,UAAUS,OAAQD,IAAKkG,EAAK8C,KAAKxJ,UAAUQ,IAC/D,IAAImL,EAAoB,UAAT7C,EAEXG,EAASpK,KAAKwJ,QAClB,QAAevH,IAAXmI,EACF0C,EAAWA,QAA4B7K,IAAjBmI,EAAOrD,WAC1B,IAAK+F,EACR,OAAO,EAGT,GAAIA,EAAS,CACX,IAAIC,EAGJ,GAFIlF,EAAKjG,OAAS,IAChBmL,EAAKlF,EAAK,IACRkF,aAAc5G,MAGhB,MAAM4G,EAGR,IAAI/D,EAAM,IAAI7C,MAAM,oBAAsB4G,EAAK,KAAOA,EAAGzG,QAAU,IAAM,KAEzE,MADA0C,EAAIgE,QAAUD,EACR/D,CACP,CAED,IAAII,EAAUgB,EAAOH,GAErB,QAAgBhI,IAAZmH,EACF,OAAO,EAET,GAAuB,mBAAZA,EACT1B,EAAa0B,EAASpJ,KAAM6H,OAE5B,KAAIoF,EAAM7D,EAAQxH,OACdsL,EAAYpB,EAAW1C,EAAS6D,GACpC,IAAStL,EAAI,EAAGA,EAAIsL,IAAOtL,EACzB+F,EAAawF,EAAUvL,GAAI3B,KAAM6H,EAHX,CAM1B,OAAO,CACT,EAgEAU,EAAaxH,UAAUoM,YAAc,SAAqBlD,EAAMJ,GAC9D,OAAOG,EAAahK,KAAMiK,EAAMJ,GAAU,EAC5C,EAEAtB,EAAaxH,UAAUuI,GAAKf,EAAaxH,UAAUoM,YAEnD5E,EAAaxH,UAAUqM,gBACnB,SAAyBnD,EAAMJ,GAC7B,OAAOG,EAAahK,KAAMiK,EAAMJ,GAAU,EAChD,EAoBAtB,EAAaxH,UAAU2H,KAAO,SAAcuB,EAAMJ,GAGhD,OAFAD,EAAcC,GACd7J,KAAKsJ,GAAGW,EAAMmB,EAAUpL,KAAMiK,EAAMJ,IAC7B7J,IACT,EAEAuI,EAAaxH,UAAUsM,oBACnB,SAA6BpD,EAAMJ,GAGjC,OAFAD,EAAcC,GACd7J,KAAKoN,gBAAgBnD,EAAMmB,EAAUpL,KAAMiK,EAAMJ,IAC1C7J,IACb,EAGAuI,EAAaxH,UAAUkI,eACnB,SAAwBgB,EAAMJ,GAC5B,IAAIyD,EAAMlD,EAAQmD,EAAU5L,EAAG6L,EAK/B,GAHA5D,EAAcC,QAGC5H,KADfmI,EAASpK,KAAKwJ,SAEZ,OAAOxJ,KAGT,QAAaiC,KADbqL,EAAOlD,EAAOH,IAEZ,OAAOjK,KAET,GAAIsN,IAASzD,GAAYyD,EAAKzD,WAAaA,EACb,KAAtB7J,KAAKyJ,aACTzJ,KAAKwJ,QAAUzB,OAAOwC,OAAO,cAEtBH,EAAOH,GACVG,EAAOnB,gBACTjJ,KAAKyK,KAAK,iBAAkBR,EAAMqD,EAAKzD,UAAYA,SAElD,GAAoB,mBAATyD,EAAqB,CAGrC,IAFAC,GAAY,EAEP5L,EAAI2L,EAAK1L,OAAS,EAAGD,GAAK,EAAGA,IAChC,GAAI2L,EAAK3L,KAAOkI,GAAYyD,EAAK3L,GAAGkI,WAAaA,EAAU,CACzD2D,EAAmBF,EAAK3L,GAAGkI,SAC3B0D,EAAW5L,EACX,KACD,CAGH,GAAI4L,EAAW,EACb,OAAOvN,KAEQ,IAAbuN,EACFD,EAAKG,QAiIf,SAAmBH,EAAMI,GACvB,KAAOA,EAAQ,EAAIJ,EAAK1L,OAAQ8L,IAC9BJ,EAAKI,GAASJ,EAAKI,EAAQ,GAC7BJ,EAAKK,KACP,CAnIUC,CAAUN,EAAMC,GAGE,IAAhBD,EAAK1L,SACPwI,EAAOH,GAAQqD,EAAK,SAEQrL,IAA1BmI,EAAOnB,gBACTjJ,KAAKyK,KAAK,iBAAkBR,EAAMuD,GAAoB3D,EACzD,CAED,OAAO7J,IACb,EAEAuI,EAAaxH,UAAU8M,IAAMtF,EAAaxH,UAAUkI,eAEpDV,EAAaxH,UAAU+M,mBACnB,SAA4B7D,GAC1B,IAAIiD,EAAW9C,EAAQzI,EAGvB,QAAeM,KADfmI,EAASpK,KAAKwJ,SAEZ,OAAOxJ,KAGT,QAA8BiC,IAA1BmI,EAAOnB,eAUT,OATyB,IAArB9H,UAAUS,QACZ5B,KAAKwJ,QAAUzB,OAAOwC,OAAO,MAC7BvK,KAAKyJ,aAAe,QACMxH,IAAjBmI,EAAOH,KACY,KAAtBjK,KAAKyJ,aACTzJ,KAAKwJ,QAAUzB,OAAOwC,OAAO,aAEtBH,EAAOH,IAEXjK,KAIT,GAAyB,IAArBmB,UAAUS,OAAc,CAC1B,IACI6D,EADAsI,EAAOhG,OAAOgG,KAAK3D,GAEvB,IAAKzI,EAAI,EAAGA,EAAIoM,EAAKnM,SAAUD,EAEjB,oBADZ8D,EAAMsI,EAAKpM,KAEX3B,KAAK8N,mBAAmBrI,GAK1B,OAHAzF,KAAK8N,mBAAmB,kBACxB9N,KAAKwJ,QAAUzB,OAAOwC,OAAO,MAC7BvK,KAAKyJ,aAAe,EACbzJ,IACR,CAID,GAAyB,mBAFzBkN,EAAY9C,EAAOH,IAGjBjK,KAAKiJ,eAAegB,EAAMiD,QACrB,QAAkBjL,IAAdiL,EAET,IAAKvL,EAAIuL,EAAUtL,OAAS,EAAGD,GAAK,EAAGA,IACrC3B,KAAKiJ,eAAegB,EAAMiD,EAAUvL,IAIxC,OAAO3B,IACb,EAmBAuI,EAAaxH,UAAUmM,UAAY,SAAmBjD,GACpD,OAAOsB,EAAWvL,KAAMiK,GAAM,EAChC,EAEA1B,EAAaxH,UAAUiN,aAAe,SAAsB/D,GAC1D,OAAOsB,EAAWvL,KAAMiK,GAAM,EAChC,EAEA1B,EAAawD,cAAgB,SAASpD,EAASsB,GAC7C,MAAqC,mBAA1BtB,EAAQoD,cACVpD,EAAQoD,cAAc9B,GAEtB8B,EAAc/K,KAAK2H,EAASsB,EAEvC,EAEA1B,EAAaxH,UAAUgL,cAAgBA,EAiBvCxD,EAAaxH,UAAUkN,WAAa,WAClC,OAAOjO,KAAKyJ,aAAe,EAAIlC,EAAevH,KAAKwJ,SAAW,EAChE,MCzHiB0E,cC7OjB,SAASC,EAAeC,EAAuBC,GAC7C,MACMC,GADc,IAAIC,aACQC,OAAOH,GACvC,OAAQD,GACN,IAAK,OACH,MAAO,CACLhM,KAAM,OACNiM,KAAMC,EACNG,KAAM,UACNpJ,KAAM,IAAIqJ,YAAY,MAE1B,IAAK,SACH,MAAO,CACLtM,KAAM,SACNiM,KAAMC,EACNG,KAAM,UACNE,WAAY,KAGhB,QACE,MAAM,IAAIxI,MAAK,aAAA+B,OAAckG,EAAyC,8BAE5E,CAMsB,SAAAQ,EAAWC,EAAqBR,4CACpD,MAAMS,EAAmBX,EAAeU,EAASE,UAAU3M,KAAMiM,GAI3DW,QAAsBC,OAAOC,OAAOC,UACxCL,EACAD,EACA,CACEzM,KAAMmD,EACN3D,OAAQ,MAEV,EACA,CAAC,UAAW,YAGd,MAAO,CAAEiN,WAAUG,gBACrB,GAAC,EDgMD,SAAiBd,GACFA,EAAAkB,UAAyB,CACpCC,WAAY,MAEDnB,EAAAoB,OAAsB,CACjCD,WAAY,KAEDnB,EAAAqB,MAAqB,CAChCF,WAAY,MAEDnB,EAAAsB,YAA2B,CACtCH,WAAY,MAEDnB,EAAAuB,iBAAgC,CAC3CJ,WAAY,MAEDnB,EAAAwB,uBAAsC,CACjDL,WAAY,KAEf,CAnBD,CAAiBnB,IAAAA,EAmBhB,CAAA,UEjUYyB,EAAbvJ,cACUpG,KAAmB4P,oBAAG,EAItB5P,KAAiB6P,kBAAW,EAE5B7P,KAAkB8P,mBAAW,CAqCvC,CAnCEC,kBACE/P,KAAK4P,qBAAuB,EACH,QAAzBI,EAAAhQ,KAAKiQ,4BAAoB,IAAAD,IAAzBhQ,KAAKiQ,qBAAyBC,KAAKC,OACnCnQ,KAAK6P,kBAAoBK,KAAKC,KAChC,CAEAC,uBACoCnO,IAA9BjC,KAAKiQ,uBAGPjQ,KAAK8P,oBAAsB,GAI3B9P,KAAK8P,mBAAqB9P,KAAK4P,qBAE/BM,KAAKC,MAAQnQ,KAAK6P,kBPmBQ,MOjB1B7P,KAAKqQ,QAET,CAEAC,eACE,OACEtQ,KAAK4P,oBPUkB,WOTQ3N,IAA9BjC,KAAKiQ,sBACJC,KAAKC,MAAQnQ,KAAKiQ,qBPSM,IOP9B,CAEAI,QACErQ,KAAK8P,mBAAqB,EAC1B9P,KAAK4P,oBAAsB,EAC3B5P,KAAKiQ,0BAAuBhO,CAC9B,EC/BK,MAAMsO,EAA6C,IAAIC,IAaxD,MAAOC,UAA0BlI,EAAAA,aAC3BmI,eACRC,EACAC,GAEA,MAAMzK,MAAM,+BACd,CAEU0K,eACRF,EACAC,GAEA,MAAMzK,MAAM,+BACd,EAOI,MAAO2K,UAAqBL,EAsBhCrK,YAAY2K,SAMVxK,QACAvG,KAAKgR,WAAa,IAAIR,IACtBxQ,KAAK+N,KAAOgD,EAAKhD,KACjB/N,KAAKiR,oBAAsBF,EAAKE,oBAChCjR,KAAKkR,OAAS,IAAIV,IAClBxQ,KAAKmR,mBAAqBJ,EAAKI,mBAC/BnR,KAAKoR,WAAgC,QAAnBpB,EAAAe,EAAKK,kBAAc,IAAApB,EAAAA,EAAAqB,WAAWC,KAAK,IACrDtR,KAAKuR,SAAW,IAAI5B,CACtB,CAQA6B,eAAeC,EAAY1D,GACzB/N,KAAKiR,oBAAsBQ,EAC3BzR,KAAK+N,KAAOA,EACZ/N,KAAKuR,SAASlB,OAChB,CAEAqB,mBACE1R,KAAKiR,yBAAsBhP,CAC7B,CAEA0P,YACE,OAAI3R,KAAKiR,oBACAV,EAAqB/D,IAAIxM,KAAKiR,0BAErC,CAEJ,CAEAW,yBACE,OAAO5R,KAAKiR,mBACd,CAEAY,aACE,OAAO7R,KAAK8R,OACd,CAMAC,cAAcC,GACZhS,KAAKiS,WAAaD,CACpB,CAMAE,UAAUC,GACRnS,KAAKkR,OAASiB,CAChB,CAEAC,eACEC,EACAC,EACAC,EACAT,EACAE,GAEIA,IACF1M,EAAaD,KAAK,8BAA+B,CAAE2M,UACnDhS,KAAKiS,WAAaD,GAGpB,MAAMQ,EAA4B,WAAdH,EAAyBrS,KAAK0Q,eAAiB1Q,KAAK6Q,eAClE4B,EAAkB,IAAIC,gBAAgB,CAC1CC,UAAWH,EAAY3R,KAAKb,QAG9BsS,EACGM,YAAYH,GACZI,OAAON,GACPO,OAAO7R,IACNqE,EAAa0F,KAAK/J,GAClBjB,KAAKyK,KAAK5D,EAAaV,MAAOlF,aAAamG,EAAenG,EAAI,IAAImG,EAAanG,EAAEqF,SAAS,IAE9FtG,KAAK8R,QAAUA,CACjB,CAEAiB,cAAcC,GACZhT,KAAKoR,WAAa4B,CACpB,CAwBgBtC,eACdC,EACAC,kDAEA,IACG5Q,KAAK2R,aAE2B,IAAjChB,EAAasC,KAAKC,WAElB,OAAOtC,EAAWuC,QAAQxC,GAE5B,MAAMyC,EAASpT,KAAK+N,KAAKsF,YACzB,IAAKD,EACH,MAAM,IAAIvO,UAAS,yBAAAqD,OAEflI,KAAKiR,oBACP/I,cAAAA,OAAalI,KAAK+N,KAAKuF,uBAG3B,MAAMtE,cAAEA,GAAkBoE,EACpBG,EAAWvT,KAAK+N,KAAKuF,qBAE3B,GAAItE,EAAe,CACjB,MAAMwE,EAAKxT,KAAKyT,eACdzD,EAAAW,EAAa+C,cAAcC,sCAA0B,EACrDhD,EAAaiD,WAEf,IAAIC,EAAY7T,KAAK8T,oBAAoBnD,GAEzC,MAAMoD,EAAc,IAAI1C,WAAWV,EAAasC,KAAM,EAAGY,EAAUG,kBAG7DC,EAAe,IAAI5C,WAAW,GAEpC4C,EAAa,GR7LM,GQ8LnBA,EAAa,GAAKV,EASlB,IACE,MAAMW,QAAmBjF,OAAOC,OAAOiF,QACrC,CACE/R,KAAMmD,EACNiO,KACAY,eAAgB,IAAI/C,WAAWV,EAAasC,KAAM,EAAGc,EAAYb,aAEnElE,EACA,IAAIqC,WAAWV,EAAasC,KAAMY,EAAUG,mBAG9C,IAAIK,EAAuB,IAAIhD,WAC7B6C,EAAWhB,WAAaM,EAAGN,WAAae,EAAaf,YAEvDmB,EAAqB5H,IAAI,IAAI4E,WAAW6C,IACxCG,EAAqB5H,IAAI,IAAI4E,WAAWmC,GAAKU,EAAWhB,YACxDmB,EAAqB5H,IAAIwH,EAAcC,EAAWhB,WAAaM,EAAGN,YAE9DW,EAAUS,SACZD,EFhFJ,SAAoBE,GACxB,MAAMC,EAAoB,GAE1B,IADA,IAAIC,EAAsB,EACjB9S,EAAI,EAAGA,EAAI4S,EAAQ3S,SAAUD,EAAG,CACvC,IAAI+S,EAAOH,EAAQ5S,GACf+S,GAPe,GAOWD,GARJ,IAUxBD,EAAQ7J,KATS,GAUjB8J,EAAsB,GAExBD,EAAQ7J,KAAK+J,GACD,GAARA,IACAD,EAEFA,EAAsB,CAEzB,CACD,OAAO,IAAIpD,WAAWmD,EACxB,CE8DiCG,CAAUN,IAGnC,IAAIO,EAAU,IAAIvD,WAAW0C,EAAYb,WAAamB,EAAqBnB,YAM3E,OALA0B,EAAQnI,IAAIsH,GACZa,EAAQnI,IAAI4H,EAAsBN,EAAYb,YAE9CvC,EAAasC,KAAO2B,EAAQC,OAErBjE,EAAWuC,QAAQxC,EAC3B,CAAC,MAAO1P,GAEPqE,EAAayB,MAAM9F,EACpB,CACF,MACCjB,KAAKyK,KACH5D,EAAaV,MACb,IAAIiB,EAAoDX,sCAAAA,EAAmBqO,eAGhF,CAQejE,eACdF,EACAC,4CAEA,IACG5Q,KAAK2R,aAE2B,IAAjChB,EAAasC,KAAKC,WAGlB,OADAlT,KAAKuR,SAASnB,kBACPQ,EAAWuC,QAAQxC,GAG5B,GAoXY,SAAsBoE,EAAwBC,GAC5D,GAAgC,IAA5BA,EAAa9B,WACf,OAAO,EAET,MAAMe,EAAe,IAAI5C,WACvB0D,EAAU3R,MAAM2R,EAAU7B,WAAa8B,EAAa9B,aAEtD,OAAO8B,EAAaC,OAAM,CAAC3M,EAAOoF,IAAUpF,IAAU2L,EAAavG,IACrE,CA5XQwH,CAAsBvE,EAAasC,KAAMjT,KAAKoR,YAGhD,OAFApR,KAAKuR,SAASxB,YAEV/P,KAAKuR,SAASjB,gBAChBK,EAAasC,KAAOtC,EAAasC,KAAK7P,MACpC,EACAuN,EAAasC,KAAKC,WAAalT,KAAKoR,WAAW8B,YAE1CtC,EAAWuC,QAAQxC,SAE1BrL,EAAa0F,KAAK,qCAIpBhL,KAAKuR,SAASnB,kBAEhB,MACMmD,EADO,IAAIlC,WAAWV,EAAasC,MACnBtC,EAAasC,KAAKC,WAAa,GAErD,GAAIlT,KAAK+N,KAAKsF,UAAUE,IAAavT,KAAK+N,KAAKoH,YAC7C,IACE,MAAMC,QAAqBpV,KAAKqV,aAAa1E,EAAc4C,GAE3D,GADAvT,KAAK+N,KAAKuH,oBACNF,EACF,OAAOxE,EAAWuC,QAAQiC,EAE7B,CAAC,MAAOrO,GACHA,aAAiBK,GAAgBL,EAAMM,SAAWZ,EAAmB8O,WACnEvV,KAAK+N,KAAKoH,cACZnV,KAAKyK,KAAK5D,EAAaV,MAAOY,GAC9B/G,KAAK+N,KAAKyH,qBAGZlQ,EAAa0F,KAAK,wBAAyB,CAAEjE,SAEhD,MACS/G,KAAK+N,KAAKsF,UAAUE,IAAavT,KAAK+N,KAAKoH,cAErD7P,EAAa0F,KAAK,mDAClBhL,KAAKyK,KACH5D,EAAaV,MACb,IAAIiB,EAAY,wCAAAc,OAC0BlI,KAAKiR,qBAC7CxK,EAAmBqO,aAI3B,GAAC,CAMaO,aACZ1E,EACA4C,GAEuD,IADvDkC,EAAAtU,UAAAS,OAAA,QAAAK,IAAAd,UAAA,GAAAA,UAAA,QAAsCc,EACtCyT,EAAoCvU,UAAAS,OAAAT,QAAAc,IAAAd,UAAAc,GAAAd,UAAA,GAAA,CAAEwU,aAAc,kDAEpD,MAAMvC,EAASpT,KAAK+N,KAAKsF,UAAUE,GACnC,IAAKmC,EAAY1G,gBAAkBoE,EACjC,MAAM,IAAIvO,UAASqD,6CAAAA,OAA8ClI,KAAKiR,sBAExE,IAAI4C,EAAY7T,KAAK8T,oBAAoBnD,GASzC,IACE,MAAMoD,EAAc,IAAI1C,WAAWV,EAAasC,KAAM,EAAGY,EAAUG,kBACnE,IAAI4B,EAAgB,IAAIvE,WACtBV,EAAasC,KACbc,EAAYnS,OACZ+O,EAAasC,KAAKC,WAAaa,EAAYnS,QAE7C,GAAIiS,EAAUS,QFxOd,SAA8BS,GAClC,IAAK,IAAIpT,EAAI,EAAGA,EAAIoT,EAAUnT,OAAS,EAAGD,IACxC,GAAoB,GAAhBoT,EAAUpT,IAA+B,GAApBoT,EAAUpT,EAAI,IAA+B,GAApBoT,EAAUpT,EAAI,GAAS,OAAO,EAElF,OAAO,CACT,CEmO8BkU,CAAoBD,GAAgB,CAC1DA,EFlOF,SAAoBE,GACxB,MAAMtB,EAAoB,GAE1B,IADA,IAAI5S,EAASkU,EAAOlU,OACXD,EAAI,EAAGA,EAAImU,EAAOlU,QAKrBA,EAASD,GAAK,IAAMmU,EAAOnU,KAAOmU,EAAOnU,EAAI,IAAuB,GAAjBmU,EAAOnU,EAAI,IAEhE6S,EAAQ7J,KAAKmL,EAAOnU,MACpB6S,EAAQ7J,KAAKmL,EAAOnU,MAEpBA,KAGA6S,EAAQ7J,KAAKmL,EAAOnU,MAGxB,OAAO,IAAI0P,WAAWmD,EACxB,CE8MwBuB,CAAUH,GAC1B,MAAMI,EAAW,IAAI3E,WAAW0C,EAAYb,WAAa0C,EAAc1C,YACvE8C,EAASvJ,IAAIsH,GACbiC,EAASvJ,IAAImJ,EAAe7B,EAAYb,YACxCvC,EAAasC,KAAO+C,EAASnB,MAC9B,CAED,MAAMZ,EAAe,IAAI5C,WAAWV,EAAasC,KAAMtC,EAAasC,KAAKC,WAAa,EAAG,GAEnF+C,EAAWhC,EAAa,GACxBT,EAAK,IAAInC,WACbV,EAAasC,KACbtC,EAAasC,KAAKC,WAAa+C,EAAWhC,EAAaf,WACvD+C,GAGIC,EAAkBnC,EAAYb,WAC9BiD,EACJxF,EAAasC,KAAKC,YACjBa,EAAYb,WAAa+C,EAAWhC,EAAaf,YAE9CkD,QAAkBnH,OAAOC,OAAOmH,QACpC,CACEjU,KAAMmD,EACNiO,KACAY,eAAgB,IAAI/C,WAAWV,EAAasC,KAAM,EAAGc,EAAYb,qBAEnElD,EAAA0F,EAAY1G,6BAAiBoE,EAAQpE,cACrC,IAAIqC,WAAWV,EAAasC,KAAMiD,EAAiBC,IAG/CvB,EAAU,IAAIlG,YAAYqF,EAAYb,WAAakD,EAAUlD,YAC7D8C,EAAW,IAAI3E,WAAWuD,GAOhC,OALAoB,EAASvJ,IAAI,IAAI4E,WAAWV,EAAasC,KAAM,EAAGc,EAAYb,aAC9D8C,EAASvJ,IAAI,IAAI4E,WAAW+E,GAAYrC,EAAYb,YAEpDvC,EAAasC,KAAO2B,EAEbjE,CACR,CAAC,MAAO5J,GACP,GAAI/G,KAAKmR,mBAAmBnL,kBAAoB,EAAG,CACjD,GAAI0P,EAAYC,aAAe3V,KAAKmR,mBAAmBnL,kBAAmB,CAOxE,IAAIsQ,EACJ,GAPAhR,EAAaxD,MAAK,0BAAAoG,OACUwN,EAAYC,aAAY,QAAAzN,OAChDlI,KAAKmR,mBAAmBnL,kBAC1BkC,eAAAA,OAAcyI,aAAwB4F,qBAAuB,QAAU,UAIrEnD,IAAWpT,KAAK+N,KAAKsF,UAAUE,GAAW,CAG5C,MAAMiD,QAAoBxW,KAAK+N,KAAK0I,WAAWlD,GAAU,GAEzD+C,QAAwB1H,EAAW4H,EAAaxW,KAAKmR,mBAAmBpL,YACzE,CAED,MAAM2Q,QAAc1W,KAAKqV,aAAa1E,EAAc4C,EAAUkC,GAAmBrC,EAAQ,CACvFuC,aAAcD,EAAYC,aAAe,EACzC3G,cAAesH,aAAA,EAAAA,EAAiBtH,gBAOlC,OALI0H,GAASJ,IACXtW,KAAK+N,KAAK4I,UAAUL,EAAiB/C,GAAU,GAE/CvT,KAAK+N,KAAK6I,mBAAmBrD,IAExBmD,CACR,CAaC,MANIjB,IACFnQ,EAAaxD,MAAM,iCACnB9B,KAAK+N,KAAK8I,mBAAmBpB,EAAgB5G,SAAU0E,IAGzDjO,EAAa0F,KAAK,qCACZ,IAAI5D,EAAYc,qCAAAA,OACiBlI,KAAKiR,qBAC1CxK,EAAmB8O,WAGxB,CACC,MAAM,IAAInO,EAAYc,sBAAAA,OACEnB,EAAMT,SAC5BG,EAAmB8O,WAGxB,IACF,CAqBO9B,OAAOE,EAA+BC,SAC5C,MAAMJ,EAAK,IAAI9E,YRtcM,IQucfoI,EAAS,IAAIC,SAASvD,GAGvBxT,KAAKgR,WAAWgG,IAAIrD,IAEvB3T,KAAKgR,WAAWvE,IAAIkH,EAAuBsD,KAAKC,MAAsB,MAAhBD,KAAKE,WAG7D,MAAMC,EAAsD,QAA1CpH,EAAAhQ,KAAKgR,WAAWxE,IAAImH,UAAsB,IAAA3D,EAAAA,EAAI,EAQhE,OANA8G,EAAOO,UAAU,EAAG1D,GACpBmD,EAAOO,UAAU,EAAGzD,GACpBkD,EAAOO,UAAU,EAAGzD,EAAawD,EAAY,OAE7CpX,KAAKgR,WAAWvE,IAAIkH,EAAuByD,EAAY,GAEhD5D,CACT,CAEQM,oBAAoB4C,SAItB7C,EAAY,CAAEG,iBAAkB,EAAGM,QAAQ,GAC/C,GFzeE,SACJoC,GAEA,MAAO,SAAUA,CACnB,CEqeQY,CAAaZ,GAAQ,CACvB,IAAIa,EAAyC,QAAzBvH,EAAAhQ,KAAKwX,cAAcd,UAAM,IAAA1G,EAAAA,EAAIhQ,KAAKiS,WAEtD,GAAsB,QAAlBsF,GAA6C,QAAlBA,EAC7B,MAAM,IAAIpR,MAAK,GAAA+B,OAAIqP,EAA+D,oDAGpF,GAAsB,QAAlBA,EAEF,OADA1D,EAAUG,iBAAmBxO,EAAkBkR,EAAMzM,MAC9C4J,EAGT,MAAMZ,EAAO,IAAI5B,WAAWqF,EAAMzD,MAClC,IACE,MAAMwE,EAqDR,SAA0B3B,GAC9B,MAAM4B,EAAmB,GACzB,IAAIC,EAAQ,EACVC,EAAM,EACNC,EAAe/B,EAAOlU,OAAS,EACjC,KAAOgW,EAAMC,GAAc,CAEzB,KACED,EAAMC,IACY,IAAhB/B,EAAO8B,IAAkC,IAApB9B,EAAO8B,EAAM,IAAgC,IAApB9B,EAAO8B,EAAM,KAE7DA,IACEA,GAAOC,IAAcD,EAAM9B,EAAOlU,QAEtC,IAAIkW,EAAMF,EACV,KAAOE,EAAMH,GAA6B,IAApB7B,EAAOgC,EAAM,IAAUA,IAE7C,GAAc,IAAVH,GACF,GAAIG,IAAQH,EAAO,MAAM9S,UAAU,0CAEnC6S,EAAO/M,KAAKgN,GAGdA,EAAQC,GAAY,CACrB,CACD,OAAOF,CACT,CA/E4BK,CAAgB9E,GASpC,GANAY,EAAUS,OACU,SAAlBiD,GACAE,EAAYO,MAAMC,GAChB,CAACC,EAASC,UAAWD,EAASE,eAAeC,SAASC,EAAcrF,EAAKgF,OAGzEpE,EAAUS,OAAQ,CACpB,IAAK,MAAM5G,KAAS+J,EAAa,CAE/B,OADWa,EAAcrF,EAAKvF,KAE5B,KAAKwK,EAASC,UACd,KAAKD,EAASE,cAEZ,OADAvE,EAAUG,iBAAmBtG,EAAQ,EAC9BmG,EAIZ,CACD,MAAM,IAAIhP,UAAU,sBACrB,CACF,CAAC,MAAO5D,GACP,CAIF,OADA4S,EAAUG,iBAAmBxO,EAAkBkR,EAAMzM,MAC9C4J,CACR,CAEC,OADAA,EAAUG,iBAAmBxO,EAAkBG,MACxCkO,CAEX,CAKQ2D,cAAcd,GACpB,GAAyB,IAArB1W,KAAKkR,OAAOqH,KACd,OAGF,MAAMC,EAAc9B,EAAMhD,cAAc8E,YAExC,OADcA,EAAcxY,KAAKkR,OAAO1E,IAAIgM,QAAevW,CAE7D,EAmCI,SAAUqW,EAAcG,GAC5B,OAAOA,EAAYC,CACrB,CAEA,MAAMA,EAAgB,GAEtB,IAAYR,GAAZ,SAAYA,GAEVA,EAAAA,EAAA,cAAA,GAAA,gBAEAA,EAAAA,EAAA,kBAAA,GAAA,oBAEAA,EAAAA,EAAA,kBAAA,GAAA,oBAEAA,EAAAA,EAAA,kBAAA,GAAA,oBAEAA,EAAAA,EAAA,UAAA,GAAA,YAEAA,EAAAA,EAAA,IAAA,GAAA,MAEAA,EAAAA,EAAA,IAAA,GAAA,MAEAA,EAAAA,EAAA,IAAA,GAAA,MAEAA,EAAAA,EAAA,IAAA,GAAA,MAEAA,EAAAA,EAAA,QAAA,IAAA,UAEAA,EAAAA,EAAA,WAAA,IAAA,aAEAA,EAAAA,EAAA,YAAA,IAAA,cAEAA,EAAAA,EAAA,QAAA,IAAA,UAEAA,EAAAA,EAAA,YAAA,IAAA,cAEAA,EAAAA,EAAA,WAAA,IAAA,aAEAA,EAAAA,EAAA,IAAA,IAAA,MAKAA,EAAAA,EAAA,UAAA,IAAA,YAEAA,EAAAA,EAAA,UAAA,IAAA,YAEAA,EAAAA,EAAA,gBAAA,IAAA,iBAGD,CA5CD,CAAYA,IAAAA,EA4CX,CAAA,IC5nBK,MAAOS,UAA+BpQ,EAAAA,aAetC4M,kBACF,OAAOnV,KAAK4Y,YACd,CAEAxS,YAAY6K,EAA6BE,GACvC5K,QATMvG,KAAsB6Y,uBAAG,EAEzB7Y,KAAY4Y,cAAY,EAQ9B5Y,KAAK8Y,gBAAkB,EACvB9Y,KAAK+Y,cAAgB,IAAInN,MTlCD,ISkCqBoN,UAAK/W,GAClDjC,KAAKmR,mBAAqBA,EAC1BnR,KAAKiZ,kBAAoB,IAAIzI,IAC7BxQ,KAAKiR,oBAAsBA,EAC3BjR,KAAKkZ,gBACP,CAEA1D,oBACMxV,KAAKmR,mBAAmBlL,iBAAmB,IAG/CjG,KAAK6Y,wBAA0B,EAE3B7Y,KAAK6Y,uBAAyB7Y,KAAKmR,mBAAmBlL,mBACxDX,EAAa0F,KAAI9C,WAAAA,OAAYlI,KAAKiR,oBAAiD,gCACnFjR,KAAK4Y,cAAe,GAExB,CAEAtD,oBACEtV,KAAKkZ,gBACP,CAMAA,iBACElZ,KAAK6Y,uBAAyB,EAC9B7Y,KAAK4Y,cAAe,CACtB,CASAnC,WAAWlD,GAAgC,IAAb4F,IAAMhY,UAAAS,OAAA,QAAAK,IAAAd,UAAA,KAAAA,UAAA,GAClC,MAAM2X,EAAkBvF,QAAAA,EAAYvT,KAAKsT,qBAEnC8F,EAAkBpZ,KAAKiZ,kBAAkBzM,IAAIsM,GACnD,QAA+B,IAApBM,EACT,OAAOA,EAET,MAAMC,EAAiB,IAAIzQ,SAAmB,CAAOC,EAASC,IAAUwQ,EAAAtZ,UAAA,OAAA,GAAA,YACtE,IACE,MAAMoT,EAASpT,KAAKqT,UAAUyF,GAC9B,IAAK1F,EACH,MAAM,IAAIvO,UAASqD,4DAAAA,OAC2ClI,KAAKiR,sBAGrE,MAAMsI,EAAkBnG,EAAOvE,SACzB2H,QHrEQ,SACpBgD,GAEuC,IADvCzK,EAAA5N,UAAAS,OAAAT,QAAAc,IAAAd,UAAAc,GAAAd,UAAuC,GAAA,CAAEiB,KAAMmD,GAC/CkU,yDAA8B,mDAG9B,OAAOxK,OAAOC,OAAOwK,UACnB,MACAF,EACAzK,GACA,EACU,WAAV0K,EAAqB,CAAC,aAAc,aAAe,CAAC,UAAW,WAEnE,GAAC,CGwDiCC,OHkCZ,SAAQ7K,EAAqBR,4CACjD,MAAMS,EAAmBX,EAAeU,EAASE,UAAU3M,KAAMiM,GAGjE,OAAOY,OAAOC,OAAOyK,WAAW7K,EAAkBD,EAAU,IAC9D,GAAC,CGtCe+K,CAAQL,EAAiBvZ,KAAKmR,mBAAmBpL,aACvDwT,EAAgBxK,UAAU3M,KAC1B,UAGE+W,IACFnZ,KAAK6W,mBAAmBL,EAAasC,GAAiB,GACtD9Y,KAAKyK,KACH9D,EAAgBkT,aAChBrD,EACAxW,KAAKiR,oBACL6H,IAGJjQ,EAAQ2N,EACT,CAAC,MAAOvV,GACP6H,EAAO7H,EACR,CAAS,QACRjB,KAAKiZ,kBAAkBa,OAAOhB,EAC/B,CACF,MAED,OADA9Y,KAAKiZ,kBAAkBxM,IAAIqM,EAAiBO,GACrCA,CACT,CAQMF,OAAOtK,GAAiC,IAAZ0E,EAAQpS,UAAAS,OAAA,QAAAK,IAAAd,UAAA,GAAAA,UAAA,GAAG,iDACrCnB,KAAK6W,mBAAmBhI,EAAU0E,GACxCvT,KAAKkZ,gBACP,GAAC,CAQKrC,mBAAmBhI,GAA2D,IAAtC0E,EAAQpS,UAAAS,OAAA,QAAAK,IAAAd,UAAA,GAAAA,UAAA,GAAG,EAAG4Y,EAAgB5Y,UAAAS,OAAA,QAAAK,IAAAd,UAAA,IAAAA,UAAA,4CAC1EmE,EAAaxD,MAAM,mBACfyR,GAAY,IACdvT,KAAK8Y,gBAAkBvF,EAAWvT,KAAK+Y,cAAcnX,QAEvD,MAAMwR,QAAexE,EAAWC,EAAU7O,KAAKmR,mBAAmBpL,aAClE/F,KAAK2W,UAAUvD,EAAQpT,KAAK8Y,gBAAiBiB,EAC/C,GAAC,CAEDpD,UAAUvD,EAAgBG,GAA0C,IAAxBwG,EAAgB5Y,UAAAS,OAAA,QAAAK,IAAAd,UAAA,IAAAA,UAAA,GAC1DnB,KAAK+Y,cAAcxF,EAAWvT,KAAK+Y,cAAcnX,QAAUwR,EAEvD2G,GACF/Z,KAAKyK,KAAK9D,EAAgBkT,aAAczG,EAAOvE,SAAU7O,KAAKiR,oBAAqBsC,EAEvF,CAEMqD,mBAAmBlJ,4CACvB1N,KAAK8Y,gBAAkBpL,EAAQ1N,KAAK+Y,cAAcnX,OAClD5B,KAAKkZ,gBACP,GAAC,CAED5F,qBACE,OAAOtT,KAAK8Y,eACd,CAOAzF,UAAUE,GACR,OAAOvT,KAAK+Y,cAAcxF,QAAAA,EAAYvT,KAAK8Y,gBAC7C,EC7JF,MAAMkB,EAAsC,GACtCC,EAAsD,IAAIzJ,IAChE,IAAI0J,EAMApU,EAEAsL,EAJA+I,GAAwB,EAMxBhJ,GAAyCtL,EAiG7C,SAASuU,GAAgBnJ,EAA6Ba,GACpD,IAAIuI,EAAUL,EAAoBM,MAAMC,GAAMA,EAAE1I,eAAiBC,IACjE,GAAKuI,EAcMpJ,IAAwBoJ,EAAQzI,0BAEzCyI,EAAQ7I,eAAeP,EAAqBuJ,GAAyBvJ,QAhBzD,CAEZ,GADA3L,EAAaD,KAAK,2BAA4B,CAAE4L,yBAC3CE,GACH,MAAMhL,MAAM,+BAEdkU,EAAU,IAAIvJ,EAAa,CACzBG,sBACAlD,KAAMyM,GAAyBvJ,GAC/BE,sBACAC,eAmDN,SAAiCiJ,GAC/BA,EAAQ/Q,GAAGzC,EAAaV,OAAQY,IAC9B,MAAM0T,EAAoB,CACxBC,KAAM,QACNzH,KAAM,CAAElM,MAAO,IAAIZ,MAAK+B,GAAAA,OAAIzB,EAAmBM,EAAMM,QAAO,MAAAa,OAAKnB,EAAMT,YAEzEqU,YAAYF,EAAI,GAEpB,CAxDIG,CAAwBP,GACxBL,EAAoBrP,KAAK0P,EAC1B,CAMD,OAAOA,CACT,CAEA,SAASG,GAAyBvJ,GAChC,GAAIkJ,EACF,OAAOU,KAET,IAAI9M,EAAOkM,EAAgBzN,IAAIyE,GAS/B,OARKlD,IACHA,EAAO,IAAI4K,EAAsB1H,EAAqBE,IAClDrL,GACFiI,EAAKoL,OAAOrT,GAEdiI,EAAKzE,GAAG3C,EAAgBkT,aAAciB,IACtCb,EAAgBxN,IAAIwE,EAAqBlD,IAEpCA,CACT,CAEA,SAAS8M,KAIP,OAHKX,IACHA,EAAmB,IAAIvB,EAAsB,aAAcxH,KAEtD+I,CACT,CA0BA,SAASY,GAAkBjM,EAAqBoC,EAA6BsC,GAS3EoH,YAR4B,CAC1BD,KAAkB,aAClBzH,KAAM,CACJhC,sBACAsC,WACA1E,aAIN,CAjLAvJ,EAAanB,gBAAgB,QAE7B4W,UAAaC,IACX,MAAMN,KAAEA,EAAIzH,KAAEA,GAA4B+H,EAAG/H,KAE7C,OAAQyH,GACN,IAAK,OACHpV,EAAaD,KAAK,sBAClB8L,GAAqB8B,EAAK9B,mBAC1BgJ,IAAiBlH,EAAK9B,mBAAmBrL,UAMzC6U,YAJwB,CACtBD,KAAM,UACNzH,KAAM,CAAEgI,QAvBmB,SA0B7B,MACF,IAAK,SAkIqBC,EAjIHjI,EAAKgI,QAiIehK,EAjINgC,EAAKhC,oBAkI5CV,EAAqB9D,IAAIwE,EAAqBiK,GAjI1C5V,EAAaD,KAAK,+BAElBsV,YAAYK,EAAG/H,MACf,MACF,IAAK,SACWmH,GAAgBnH,EAAKhC,oBAAqBgC,EAAKnB,SACrDM,eACNsI,EACAzH,EAAKkI,eACLlI,EAAKmI,eACLnI,EAAKnB,QACLmB,EAAKjB,OAEP,MACF,IAAK,SACcoI,GAAgBnH,EAAKhC,oBAAqBgC,EAAKnB,SACrDM,eACTsI,EACAzH,EAAKkI,eACLlI,EAAKmI,eACLnI,EAAKnB,QACLmB,EAAKjB,OAEP,MACF,IAAK,SACCmI,GACF7U,EAAa0F,KAAK,kBA0GJvF,EAzGDwN,EAAKxN,IAyGYiI,EAzGPuF,EAAKM,SA0GlCjO,EAAaxD,MAAM,sBACnBgE,EAAYL,EACZoV,KAAsB1B,OAAO1T,EAAKiI,IA3GnBuF,EAAKhC,qBACd3L,EAAa0F,KAAI9C,8BAAAA,OAA+B+K,EAAKhC,sBACrDuJ,GAAyBvH,EAAKhC,qBAAqBkI,OAAOlG,EAAKxN,IAAKwN,EAAKM,WAEzEjO,EAAayB,MAAM,mEAErB,MACF,IAAK,kBAyFwB+K,EAxFHmB,EAAKnB,QAyF4B,QAA7D9B,EAAAgK,EAAoBM,MAAMC,GAAMA,EAAE1I,eAAiBC,WAAU,IAAA9B,GAAAA,EAAA0B,mBAxFzD,MACF,IAAK,cACH0I,GAAgBnH,EAAKhC,oBAAqBgC,EAAKnB,SAASC,cAAckB,EAAKjB,OAC3E,MACF,IAAK,YAEHgI,EAAoBqB,SAASC,IACvBA,EAAG1J,2BAA6BqB,EAAKhC,qBACvCqK,EAAGpJ,UAAUe,EAAKd,IACnB,IAEH,MACF,IAAK,kBAWT,SAAoCc,qCAClC,GAAIkH,EAAc,CAChB,MAAMoB,EAAaV,WACbU,EAAW9E,WAAWxD,EAAKM,UACjCgI,EAAWrC,gBACZ,MAAM,GAAIjG,EAAKhC,oBAAqB,CACnC,MAAMsK,EAAaf,GAAyBvH,EAAKhC,2BAC3CsK,EAAW9E,WAAWxD,EAAKM,UACjCgI,EAAWrC,gBACZ,MACC5T,EAAayB,MACX,sFAGN,GAAC,CAxBKyU,CAAqBvI,GACrB,MACF,IAAK,gBA4GiBD,EA3GHC,EAAKD,QA4G1B5B,EAAa4B,EACbgH,EAAoBqB,SAASd,IAC3BA,EAAExH,cAAcC,EAAQ,IAH5B,IAA0BA,EApCOlB,IAQXrM,EAAgBiI,EAJRwN,EAAiBjK,CAxEnC,EAiHRzO,KAAKiZ,oBACPnW,EAAaxD,MAAM,yBAEnBU,KAAKkZ,eAAkBC,IACrB,MAAMC,EAAcD,EAAMC,YAC1BtW,EAAaxD,MAAM,cAAe8Z,GAClCA,EAAYC,SAAU,EACtB,MAAMnB,KAAEA,EAAIzJ,oBAAEA,EAAmBa,QAAEA,EAAOE,MAAEA,GAAU4J,EAAYE,QAC5DzB,EAAUD,GAAgBnJ,EAAqBa,GACrDxM,EAAaxD,MAAM,YAAa,CAAEkQ,UAClCqI,EAAQjI,eAAesI,EAAMkB,EAAYtJ,SAAUsJ,EAAYrJ,SAAUT,EAASE,EAAM","x_google_ignoreList":[0,6]}